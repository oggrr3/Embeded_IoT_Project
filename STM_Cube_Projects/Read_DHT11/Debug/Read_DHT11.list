
Read_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003260  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800336c  0800336c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033f0  080033f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080033f0  080033f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033f0  080033f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08003468  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003468  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da36  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d72  00000000  00000000  0002dacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00030460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bd6  00000000  00000000  00030fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d382  00000000  00000000  00048ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae79  00000000  00000000  00055f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0da1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003694  00000000  00000000  000e0df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003354 	.word	0x08003354

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003354 	.word	0x08003354

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <microDelay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void microDelay (uint16_t delay)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000166:	4b08      	ldr	r3, [pc, #32]	; (8000188 <microDelay+0x2c>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	2200      	movs	r2, #0
 800016c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800016e:	bf00      	nop
 8000170:	4b05      	ldr	r3, [pc, #20]	; (8000188 <microDelay+0x2c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000176:	88fb      	ldrh	r3, [r7, #6]
 8000178:	429a      	cmp	r2, r3
 800017a:	d3f9      	bcc.n	8000170 <microDelay+0x14>
}
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000120 	.word	0x20000120

0800018c <DHT11_Start>:

/* Function to initialize communication with DHT11 */
void DHT11_Start(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000192:	463b      	mov	r3, r7
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]

  /* Configure pin as output */
  GPIO_InitStruct.Pin = DHT11_PIN;
 800019e:	2301      	movs	r3, #1
 80001a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001a2:	2301      	movs	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001a6:	2300      	movs	r3, #0
 80001a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001aa:	2302      	movs	r3, #2
 80001ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80001ae:	463b      	mov	r3, r7
 80001b0:	4619      	mov	r1, r3
 80001b2:	4810      	ldr	r0, [pc, #64]	; (80001f4 <DHT11_Start+0x68>)
 80001b4:	f000 fdae 	bl	8000d14 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	2101      	movs	r1, #1
 80001bc:	480d      	ldr	r0, [pc, #52]	; (80001f4 <DHT11_Start+0x68>)
 80001be:	f000 ff44 	bl	800104a <HAL_GPIO_WritePin>
  HAL_Delay(20); // Pull low for >18ms
 80001c2:	2014      	movs	r0, #20
 80001c4:	f000 fbc2 	bl	800094c <HAL_Delay>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2101      	movs	r1, #1
 80001cc:	4809      	ldr	r0, [pc, #36]	; (80001f4 <DHT11_Start+0x68>)
 80001ce:	f000 ff3c 	bl	800104a <HAL_GPIO_WritePin>
  microDelay(30); // Pull high for 30us
 80001d2:	201e      	movs	r0, #30
 80001d4:	f7ff ffc2 	bl	800015c <microDelay>

  /* Configure pin as input */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d8:	2300      	movs	r3, #0
 80001da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001dc:	2300      	movs	r3, #0
 80001de:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80001e0:	463b      	mov	r3, r7
 80001e2:	4619      	mov	r1, r3
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <DHT11_Start+0x68>)
 80001e6:	f000 fd95 	bl	8000d14 <HAL_GPIO_Init>
}
 80001ea:	bf00      	nop
 80001ec:	3710      	adds	r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40010800 	.word	0x40010800

080001f8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
  uint8_t response = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	71fb      	strb	r3, [r7, #7]
  microDelay(40);
 8000202:	2028      	movs	r0, #40	; 0x28
 8000204:	f7ff ffaa 	bl	800015c <microDelay>

  if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000208:	2101      	movs	r1, #1
 800020a:	480f      	ldr	r0, [pc, #60]	; (8000248 <DHT11_Check_Response+0x50>)
 800020c:	f000 ff06 	bl	800101c <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d10b      	bne.n	800022e <DHT11_Check_Response+0x36>
  {
	  microDelay(80);
 8000216:	2050      	movs	r0, #80	; 0x50
 8000218:	f7ff ffa0 	bl	800015c <microDelay>
    if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800021c:	2101      	movs	r1, #1
 800021e:	480a      	ldr	r0, [pc, #40]	; (8000248 <DHT11_Check_Response+0x50>)
 8000220:	f000 fefc 	bl	800101c <HAL_GPIO_ReadPin>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <DHT11_Check_Response+0x36>
      response = 1;
 800022a:	2301      	movs	r3, #1
 800022c:	71fb      	strb	r3, [r7, #7]
  }
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // wait for the pin to go low
 800022e:	bf00      	nop
 8000230:	2101      	movs	r1, #1
 8000232:	4805      	ldr	r0, [pc, #20]	; (8000248 <DHT11_Check_Response+0x50>)
 8000234:	f000 fef2 	bl	800101c <HAL_GPIO_ReadPin>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1f8      	bne.n	8000230 <DHT11_Check_Response+0x38>

  return response;
 800023e:	79fb      	ldrb	r3, [r7, #7]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40010800 	.word	0x40010800

0800024c <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
  uint8_t i, j;
  for (j = 0; j < 8; j++)
 8000252:	2300      	movs	r3, #0
 8000254:	71bb      	strb	r3, [r7, #6]
 8000256:	e037      	b.n	80002c8 <DHT11_Read+0x7c>
  {
    while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // Wait for pin to go high
 8000258:	bf00      	nop
 800025a:	2101      	movs	r1, #1
 800025c:	481e      	ldr	r0, [pc, #120]	; (80002d8 <DHT11_Read+0x8c>)
 800025e:	f000 fedd 	bl	800101c <HAL_GPIO_ReadPin>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d0f8      	beq.n	800025a <DHT11_Read+0xe>
    microDelay(40); // 40us delay
 8000268:	2028      	movs	r0, #40	; 0x28
 800026a:	f7ff ff77 	bl	800015c <microDelay>
    if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800026e:	2101      	movs	r1, #1
 8000270:	4819      	ldr	r0, [pc, #100]	; (80002d8 <DHT11_Read+0x8c>)
 8000272:	f000 fed3 	bl	800101c <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10e      	bne.n	800029a <DHT11_Read+0x4e>
    {
      i &= ~(1 << (7 - j)); // Write 0
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	f1c3 0307 	rsb	r3, r3, #7
 8000282:	2201      	movs	r2, #1
 8000284:	fa02 f303 	lsl.w	r3, r2, r3
 8000288:	b25b      	sxtb	r3, r3
 800028a:	43db      	mvns	r3, r3
 800028c:	b25a      	sxtb	r2, r3
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	4013      	ands	r3, r2
 8000294:	b25b      	sxtb	r3, r3
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	e00b      	b.n	80002b2 <DHT11_Read+0x66>
    }
    else
    {
      i |= (1 << (7 - j)); // Write 1
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	f1c3 0307 	rsb	r3, r3, #7
 80002a0:	2201      	movs	r2, #1
 80002a2:	fa02 f303 	lsl.w	r3, r2, r3
 80002a6:	b25a      	sxtb	r2, r3
 80002a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	71fb      	strb	r3, [r7, #7]
    }
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // Wait for pin to go low
 80002b2:	bf00      	nop
 80002b4:	2101      	movs	r1, #1
 80002b6:	4808      	ldr	r0, [pc, #32]	; (80002d8 <DHT11_Read+0x8c>)
 80002b8:	f000 feb0 	bl	800101c <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1f8      	bne.n	80002b4 <DHT11_Read+0x68>
  for (j = 0; j < 8; j++)
 80002c2:	79bb      	ldrb	r3, [r7, #6]
 80002c4:	3301      	adds	r3, #1
 80002c6:	71bb      	strb	r3, [r7, #6]
 80002c8:	79bb      	ldrb	r3, [r7, #6]
 80002ca:	2b07      	cmp	r3, #7
 80002cc:	d9c4      	bls.n	8000258 <DHT11_Read+0xc>
  }
  return i;
 80002ce:	79fb      	ldrb	r3, [r7, #7]
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40010800 	.word	0x40010800

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fad1 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f871 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f92f 	bl	800054c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002ee:	f000 f903 	bl	80004f8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80002f2:	f000 f8b1 	bl	8000458 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1); // Start timer for microsecond delays
 80002f6:	482f      	ldr	r0, [pc, #188]	; (80003b4 <main+0xd8>)
 80002f8:	f001 fb36 	bl	8001968 <HAL_TIM_Base_Start>
  while (1)
  {
	//printf("Debug: Counter = %d\r\n", counter++);
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    /* Start DHT11 communication */
    DHT11_Start();
 80002fc:	f7ff ff46 	bl	800018c <DHT11_Start>
    if (DHT11_Check_Response())
 8000300:	f7ff ff7a 	bl	80001f8 <DHT11_Check_Response>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d04f      	beq.n	80003aa <main+0xce>
    {
      dht11_data[0] = DHT11_Read(); // Humidity integer
 800030a:	f7ff ff9f 	bl	800024c <DHT11_Read>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <main+0xdc>)
 8000314:	701a      	strb	r2, [r3, #0]
      dht11_data[1] = DHT11_Read(); // Humidity decimal
 8000316:	f7ff ff99 	bl	800024c <DHT11_Read>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <main+0xdc>)
 8000320:	705a      	strb	r2, [r3, #1]
      dht11_data[2] = DHT11_Read(); // Temperature integer
 8000322:	f7ff ff93 	bl	800024c <DHT11_Read>
 8000326:	4603      	mov	r3, r0
 8000328:	461a      	mov	r2, r3
 800032a:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <main+0xdc>)
 800032c:	709a      	strb	r2, [r3, #2]
      dht11_data[3] = DHT11_Read(); // Temperature decimal
 800032e:	f7ff ff8d 	bl	800024c <DHT11_Read>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <main+0xdc>)
 8000338:	70da      	strb	r2, [r3, #3]
      dht11_data[4] = DHT11_Read(); // Checksum
 800033a:	f7ff ff87 	bl	800024c <DHT11_Read>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <main+0xdc>)
 8000344:	711a      	strb	r2, [r3, #4]

//      if (1 < dht11_data[2] && dht11_data[2] < 95) {
//      	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//      }

      if ((dht11_data[0] + dht11_data[1] + dht11_data[2] + dht11_data[3]) == dht11_data[4])
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <main+0xdc>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	461a      	mov	r2, r3
 800034c:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <main+0xdc>)
 800034e:	785b      	ldrb	r3, [r3, #1]
 8000350:	4413      	add	r3, r2
 8000352:	4a19      	ldr	r2, [pc, #100]	; (80003b8 <main+0xdc>)
 8000354:	7892      	ldrb	r2, [r2, #2]
 8000356:	4413      	add	r3, r2
 8000358:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <main+0xdc>)
 800035a:	78d2      	ldrb	r2, [r2, #3]
 800035c:	4413      	add	r3, r2
 800035e:	4a16      	ldr	r2, [pc, #88]	; (80003b8 <main+0xdc>)
 8000360:	7912      	ldrb	r2, [r2, #4]
 8000362:	4293      	cmp	r3, r2
 8000364:	d121      	bne.n	80003aa <main+0xce>
      {
        /* Format the data */
        sprintf(uart_buffer, "Temp: %d.%dC, Humidity: %d.%d%%\r\n",
                dht11_data[2], dht11_data[3], dht11_data[0], dht11_data[1]);
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <main+0xdc>)
 8000368:	789b      	ldrb	r3, [r3, #2]
        sprintf(uart_buffer, "Temp: %d.%dC, Humidity: %d.%d%%\r\n",
 800036a:	4619      	mov	r1, r3
                dht11_data[2], dht11_data[3], dht11_data[0], dht11_data[1]);
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <main+0xdc>)
 800036e:	78db      	ldrb	r3, [r3, #3]
        sprintf(uart_buffer, "Temp: %d.%dC, Humidity: %d.%d%%\r\n",
 8000370:	4618      	mov	r0, r3
                dht11_data[2], dht11_data[3], dht11_data[0], dht11_data[1]);
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <main+0xdc>)
 8000374:	781b      	ldrb	r3, [r3, #0]
        sprintf(uart_buffer, "Temp: %d.%dC, Humidity: %d.%d%%\r\n",
 8000376:	461a      	mov	r2, r3
                dht11_data[2], dht11_data[3], dht11_data[0], dht11_data[1]);
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <main+0xdc>)
 800037a:	785b      	ldrb	r3, [r3, #1]
        sprintf(uart_buffer, "Temp: %d.%dC, Humidity: %d.%d%%\r\n",
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	9200      	str	r2, [sp, #0]
 8000380:	4603      	mov	r3, r0
 8000382:	460a      	mov	r2, r1
 8000384:	490d      	ldr	r1, [pc, #52]	; (80003bc <main+0xe0>)
 8000386:	480e      	ldr	r0, [pc, #56]	; (80003c0 <main+0xe4>)
 8000388:	f002 fbaa 	bl	8002ae0 <siprintf>

        /* Send data via UART to HM10 */
        HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <main+0xe4>)
 800038e:	f7ff fedd 	bl	800014c <strlen>
 8000392:	4603      	mov	r3, r0
 8000394:	b29a      	uxth	r2, r3
 8000396:	2364      	movs	r3, #100	; 0x64
 8000398:	4909      	ldr	r1, [pc, #36]	; (80003c0 <main+0xe4>)
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <main+0xe8>)
 800039c:	f001 fda8 	bl	8001ef0 <HAL_UART_Transmit>

        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a4:	4808      	ldr	r0, [pc, #32]	; (80003c8 <main+0xec>)
 80003a6:	f000 fe68 	bl	800107a <HAL_GPIO_TogglePin>
      }
    }

    HAL_Delay(2000); // Wait for 2 seconds before the next reading
 80003aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003ae:	f000 facd 	bl	800094c <HAL_Delay>
    DHT11_Start();
 80003b2:	e7a3      	b.n	80002fc <main+0x20>
 80003b4:	20000120 	.word	0x20000120
 80003b8:	20000168 	.word	0x20000168
 80003bc:	0800336c 	.word	0x0800336c
 80003c0:	20000098 	.word	0x20000098
 80003c4:	200000d8 	.word	0x200000d8
 80003c8:	40011000 	.word	0x40011000

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b090      	sub	sp, #64	; 0x40
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0318 	add.w	r3, r7, #24
 80003d6:	2228      	movs	r2, #40	; 0x28
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 fb78 	bl	8002ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ee:	2301      	movs	r3, #1
 80003f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fc:	2301      	movs	r3, #1
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000400:	2302      	movs	r3, #2
 8000402:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800040a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800040e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000410:	f107 0318 	add.w	r3, r7, #24
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fe49 	bl	80010ac <HAL_RCC_OscConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000420:	f000 f8f4 	bl	800060c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000424:	230f      	movs	r3, #15
 8000426:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000428:	2302      	movs	r3, #2
 800042a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000434:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2102      	movs	r1, #2
 800043e:	4618      	mov	r0, r3
 8000440:	f001 f8b4 	bl	80015ac <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800044a:	f000 f8df 	bl	800060c <Error_Handler>
  }
}
 800044e:	bf00      	nop
 8000450:	3740      	adds	r7, #64	; 0x40
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046c:	463b      	mov	r3, r7
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_TIM1_Init+0x98>)
 8000476:	4a1f      	ldr	r2, [pc, #124]	; (80004f4 <MX_TIM1_Init+0x9c>)
 8000478:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800047a:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <MX_TIM1_Init+0x98>)
 800047c:	2247      	movs	r2, #71	; 0x47
 800047e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_TIM1_Init+0x98>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_TIM1_Init+0x98>)
 8000488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800048c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048e:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_TIM1_Init+0x98>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000494:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <MX_TIM1_Init+0x98>)
 8000496:	2200      	movs	r2, #0
 8000498:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_TIM1_Init+0x98>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004a0:	4813      	ldr	r0, [pc, #76]	; (80004f0 <MX_TIM1_Init+0x98>)
 80004a2:	f001 fa11 	bl	80018c8 <HAL_TIM_Base_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80004ac:	f000 f8ae 	bl	800060c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4619      	mov	r1, r3
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <MX_TIM1_Init+0x98>)
 80004be:	f001 fa9d 	bl	80019fc <HAL_TIM_ConfigClockSource>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80004c8:	f000 f8a0 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004cc:	2300      	movs	r3, #0
 80004ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d4:	463b      	mov	r3, r7
 80004d6:	4619      	mov	r1, r3
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_TIM1_Init+0x98>)
 80004da:	f001 fc5b 	bl	8001d94 <HAL_TIMEx_MasterConfigSynchronization>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004e4:	f000 f892 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004e8:	bf00      	nop
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000120 	.word	0x20000120
 80004f4:	40012c00 	.word	0x40012c00

080004f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 80004fe:	4a12      	ldr	r2, [pc, #72]	; (8000548 <MX_USART1_UART_Init+0x50>)
 8000500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000504:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000530:	f001 fc8e 	bl	8001e50 <HAL_UART_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800053a:	f000 f867 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200000d8 	.word	0x200000d8
 8000548:	40013800 	.word	0x40013800

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <MX_GPIO_Init+0xb4>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0310 	and.w	r3, r3, #16
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <MX_GPIO_Init+0xb4>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a20      	ldr	r2, [pc, #128]	; (8000600 <MX_GPIO_Init+0xb4>)
 800057e:	f043 0320 	orr.w	r3, r3, #32
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0320 	and.w	r3, r3, #32
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a1a      	ldr	r2, [pc, #104]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_GPIO_Init+0xb4>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	4815      	ldr	r0, [pc, #84]	; (8000604 <MX_GPIO_Init+0xb8>)
 80005b0:	f000 fd4b 	bl	800104a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	4813      	ldr	r0, [pc, #76]	; (8000608 <MX_GPIO_Init+0xbc>)
 80005ba:	f000 fd46 	bl	800104a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80005be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <MX_GPIO_Init+0xb8>)
 80005d8:	f000 fb9c 	bl	8000d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005dc:	2301      	movs	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_GPIO_Init+0xbc>)
 80005f4:	f000 fb8e 	bl	8000d14 <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	40011000 	.word	0x40011000
 8000608:	40010800 	.word	0x40010800

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_MspInit+0x5c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <HAL_MspInit+0x5c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x5c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_MspInit+0x5c>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_MspInit+0x60>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_MspInit+0x60>)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000
 8000678:	40010000 	.word	0x40010000

0800067c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <HAL_TIM_Base_MspInit+0x34>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d10b      	bne.n	80006a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_TIM_Base_MspInit+0x38>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_TIM_Base_MspInit+0x38>)
 8000694:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_TIM_Base_MspInit+0x38>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40012c00 	.word	0x40012c00
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a20      	ldr	r2, [pc, #128]	; (8000754 <HAL_UART_MspInit+0x9c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d139      	bne.n	800074c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a18      	ldr	r2, [pc, #96]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	480f      	ldr	r0, [pc, #60]	; (800075c <HAL_UART_MspInit+0xa4>)
 800071e:	f000 faf9 	bl	8000d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <HAL_UART_MspInit+0xa4>)
 8000738:	f000 faec 	bl	8000d14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2025      	movs	r0, #37	; 0x25
 8000742:	f000 f9fe 	bl	8000b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000746:	2025      	movs	r0, #37	; 0x25
 8000748:	f000 fa17 	bl	8000b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f8b5 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <USART1_IRQHandler+0x10>)
 80007b6:	f001 fc27 	bl	8002008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000d8 	.word	0x200000d8

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f002 f942 	bl	8002a7c <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20005000 	.word	0x20005000
 8000824:	00000400 	.word	0x00000400
 8000828:	2000008c 	.word	0x2000008c
 800082c:	20000188 	.word	0x20000188

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff fff8 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000842:	490c      	ldr	r1, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000858:	4c09      	ldr	r4, [pc, #36]	; (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 f90f 	bl	8002a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fd37 	bl	80002dc <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000878:	080033f8 	.word	0x080033f8
  ldr r2, =_sbss
 800087c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000880:	20000184 	.word	0x20000184

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f947 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff feb8 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f95f 	bl	8000b96 <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 f927 	bl	8000b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	20000170 	.word	0x20000170

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000170 	.word	0x20000170

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff fff0 	bl	8000938 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffe0 	bl	8000938 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4906      	ldr	r1, [pc, #24]	; (8000a2c <__NVIC_EnableIRQ+0x34>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af8:	d301      	bcc.n	8000afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00f      	b.n	8000b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <SysTick_Config+0x40>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b06:	210f      	movs	r1, #15
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f7ff ff90 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SysTick_Config+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SysTick_Config+0x40>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff2d 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b54:	f7ff ff42 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	6978      	ldr	r0, [r7, #20]
 8000b60:	f7ff ff90 	bl	8000a84 <NVIC_EncodePriority>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff5f 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff35 	bl	80009f8 <__NVIC_EnableIRQ>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ffa2 	bl	8000ae8 <SysTick_Config>
 8000ba4:	4603      	mov	r3, r0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d008      	beq.n	8000bd8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2204      	movs	r2, #4
 8000bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e020      	b.n	8000c1a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 020e 	bic.w	r2, r2, #14
 8000be6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 0201 	bic.w	r2, r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c00:	2101      	movs	r1, #1
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d005      	beq.n	8000c48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2204      	movs	r2, #4
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e051      	b.n	8000cec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 020e 	bic.w	r2, r2, #14
 8000c56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0201 	bic.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <HAL_DMA_Abort_IT+0xd4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d029      	beq.n	8000cc6 <HAL_DMA_Abort_IT+0xa2>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <HAL_DMA_Abort_IT+0xd8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d022      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0x9e>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_DMA_Abort_IT+0xdc>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d01a      	beq.n	8000cbc <HAL_DMA_Abort_IT+0x98>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <HAL_DMA_Abort_IT+0xe0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d012      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0x92>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_DMA_Abort_IT+0xe4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d00a      	beq.n	8000cb0 <HAL_DMA_Abort_IT+0x8c>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <HAL_DMA_Abort_IT+0xe8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d102      	bne.n	8000caa <HAL_DMA_Abort_IT+0x86>
 8000ca4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ca8:	e00e      	b.n	8000cc8 <HAL_DMA_Abort_IT+0xa4>
 8000caa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cae:	e00b      	b.n	8000cc8 <HAL_DMA_Abort_IT+0xa4>
 8000cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb4:	e008      	b.n	8000cc8 <HAL_DMA_Abort_IT+0xa4>
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	e005      	b.n	8000cc8 <HAL_DMA_Abort_IT+0xa4>
 8000cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc0:	e002      	b.n	8000cc8 <HAL_DMA_Abort_IT+0xa4>
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	e000      	b.n	8000cc8 <HAL_DMA_Abort_IT+0xa4>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <HAL_DMA_Abort_IT+0xec>)
 8000cca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	4798      	blx	r3
    } 
  }
  return status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40020008 	.word	0x40020008
 8000cfc:	4002001c 	.word	0x4002001c
 8000d00:	40020030 	.word	0x40020030
 8000d04:	40020044 	.word	0x40020044
 8000d08:	40020058 	.word	0x40020058
 8000d0c:	4002006c 	.word	0x4002006c
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b08b      	sub	sp, #44	; 0x2c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e169      	b.n	8000ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	f040 8158 	bne.w	8000ff6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4a9a      	ldr	r2, [pc, #616]	; (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d05e      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d50:	4a98      	ldr	r2, [pc, #608]	; (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d875      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d56:	4a98      	ldr	r2, [pc, #608]	; (8000fb8 <HAL_GPIO_Init+0x2a4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d058      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d5c:	4a96      	ldr	r2, [pc, #600]	; (8000fb8 <HAL_GPIO_Init+0x2a4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d86f      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d62:	4a96      	ldr	r2, [pc, #600]	; (8000fbc <HAL_GPIO_Init+0x2a8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d052      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d68:	4a94      	ldr	r2, [pc, #592]	; (8000fbc <HAL_GPIO_Init+0x2a8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d869      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d6e:	4a94      	ldr	r2, [pc, #592]	; (8000fc0 <HAL_GPIO_Init+0x2ac>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d04c      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d74:	4a92      	ldr	r2, [pc, #584]	; (8000fc0 <HAL_GPIO_Init+0x2ac>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d863      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d7a:	4a92      	ldr	r2, [pc, #584]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d046      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d80:	4a90      	ldr	r2, [pc, #576]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d85d      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d86:	2b12      	cmp	r3, #18
 8000d88:	d82a      	bhi.n	8000de0 <HAL_GPIO_Init+0xcc>
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d859      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d8e:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <HAL_GPIO_Init+0x80>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000e0f 	.word	0x08000e0f
 8000d98:	08000de9 	.word	0x08000de9
 8000d9c:	08000dfb 	.word	0x08000dfb
 8000da0:	08000e3d 	.word	0x08000e3d
 8000da4:	08000e43 	.word	0x08000e43
 8000da8:	08000e43 	.word	0x08000e43
 8000dac:	08000e43 	.word	0x08000e43
 8000db0:	08000e43 	.word	0x08000e43
 8000db4:	08000e43 	.word	0x08000e43
 8000db8:	08000e43 	.word	0x08000e43
 8000dbc:	08000e43 	.word	0x08000e43
 8000dc0:	08000e43 	.word	0x08000e43
 8000dc4:	08000e43 	.word	0x08000e43
 8000dc8:	08000e43 	.word	0x08000e43
 8000dcc:	08000e43 	.word	0x08000e43
 8000dd0:	08000e43 	.word	0x08000e43
 8000dd4:	08000e43 	.word	0x08000e43
 8000dd8:	08000df1 	.word	0x08000df1
 8000ddc:	08000e05 	.word	0x08000e05
 8000de0:	4a79      	ldr	r2, [pc, #484]	; (8000fc8 <HAL_GPIO_Init+0x2b4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000de6:	e02c      	b.n	8000e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	623b      	str	r3, [r7, #32]
          break;
 8000dee:	e029      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	3304      	adds	r3, #4
 8000df6:	623b      	str	r3, [r7, #32]
          break;
 8000df8:	e024      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	3308      	adds	r3, #8
 8000e00:	623b      	str	r3, [r7, #32]
          break;
 8000e02:	e01f      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	330c      	adds	r3, #12
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	e01a      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e16:	2304      	movs	r3, #4
 8000e18:	623b      	str	r3, [r7, #32]
          break;
 8000e1a:	e013      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d105      	bne.n	8000e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	611a      	str	r2, [r3, #16]
          break;
 8000e2e:	e009      	b.n	8000e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e30:	2308      	movs	r3, #8
 8000e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	615a      	str	r2, [r3, #20]
          break;
 8000e3a:	e003      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
          break;
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          break;
 8000e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2bff      	cmp	r3, #255	; 0xff
 8000e48:	d801      	bhi.n	8000e4e <HAL_GPIO_Init+0x13a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	e001      	b.n	8000e52 <HAL_GPIO_Init+0x13e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3304      	adds	r3, #4
 8000e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2bff      	cmp	r3, #255	; 0xff
 8000e58:	d802      	bhi.n	8000e60 <HAL_GPIO_Init+0x14c>
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	e002      	b.n	8000e66 <HAL_GPIO_Init+0x152>
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	3b08      	subs	r3, #8
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	401a      	ands	r2, r3
 8000e78:	6a39      	ldr	r1, [r7, #32]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	431a      	orrs	r2, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e94:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eac:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <HAL_GPIO_Init+0x2bc>)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1ec>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3f      	ldr	r2, [pc, #252]	; (8000fd8 <HAL_GPIO_Init+0x2c4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1e8>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a3e      	ldr	r2, [pc, #248]	; (8000fdc <HAL_GPIO_Init+0x2c8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e4>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a3d      	ldr	r2, [pc, #244]	; (8000fe0 <HAL_GPIO_Init+0x2cc>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1e0>
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e006      	b.n	8000f02 <HAL_GPIO_Init+0x1ee>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e004      	b.n	8000f02 <HAL_GPIO_Init+0x1ee>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e002      	b.n	8000f02 <HAL_GPIO_Init+0x1ee>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <HAL_GPIO_Init+0x1ee>
 8000f00:	2300      	movs	r3, #0
 8000f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f04:	f002 0203 	and.w	r2, r2, #3
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	4093      	lsls	r3, r2
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f12:	492f      	ldr	r1, [pc, #188]	; (8000fd0 <HAL_GPIO_Init+0x2bc>)
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	492c      	ldr	r1, [pc, #176]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	608b      	str	r3, [r1, #8]
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f3a:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	4928      	ldr	r1, [pc, #160]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	4922      	ldr	r1, [pc, #136]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	60cb      	str	r3, [r1, #12]
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	491e      	ldr	r1, [pc, #120]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	4918      	ldr	r1, [pc, #96]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4914      	ldr	r1, [pc, #80]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d021      	beq.n	8000fe8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	e021      	b.n	8000ff6 <HAL_GPIO_Init+0x2e2>
 8000fb2:	bf00      	nop
 8000fb4:	10320000 	.word	0x10320000
 8000fb8:	10310000 	.word	0x10310000
 8000fbc:	10220000 	.word	0x10220000
 8000fc0:	10210000 	.word	0x10210000
 8000fc4:	10120000 	.word	0x10120000
 8000fc8:	10110000 	.word	0x10110000
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40011400 	.word	0x40011400
 8000fe4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_GPIO_Init+0x304>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4909      	ldr	r1, [pc, #36]	; (8001018 <HAL_GPIO_Init+0x304>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	fa22 f303 	lsr.w	r3, r2, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	f47f ae8e 	bne.w	8000d28 <HAL_GPIO_Init+0x14>
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	372c      	adds	r7, #44	; 0x2c
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40010400 	.word	0x40010400

0800101c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	4013      	ands	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e001      	b.n	800103e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	4613      	mov	r3, r2
 8001058:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105a:	787b      	ldrb	r3, [r7, #1]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001060:	887a      	ldrh	r2, [r7, #2]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001066:	e003      	b.n	8001070 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	041a      	lsls	r2, r3, #16
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	611a      	str	r2, [r3, #16]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800107a:	b480      	push	{r7}
 800107c:	b085      	sub	sp, #20
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800108c:	887a      	ldrh	r2, [r7, #2]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	041a      	lsls	r2, r3, #16
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43d9      	mvns	r1, r3
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	400b      	ands	r3, r1
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	611a      	str	r2, [r3, #16]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e26c      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8087 	beq.w	80011da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010cc:	4b92      	ldr	r3, [pc, #584]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d00c      	beq.n	80010f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d8:	4b8f      	ldr	r3, [pc, #572]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d112      	bne.n	800110a <HAL_RCC_OscConfig+0x5e>
 80010e4:	4b8c      	ldr	r3, [pc, #560]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f0:	d10b      	bne.n	800110a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f2:	4b89      	ldr	r3, [pc, #548]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d06c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x12c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d168      	bne.n	80011d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e246      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x76>
 8001114:	4b80      	ldr	r3, [pc, #512]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a7f      	ldr	r2, [pc, #508]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e02e      	b.n	8001180 <HAL_RCC_OscConfig+0xd4>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x98>
 800112a:	4b7b      	ldr	r3, [pc, #492]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a7a      	ldr	r2, [pc, #488]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b78      	ldr	r3, [pc, #480]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a77      	ldr	r2, [pc, #476]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800113c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e01d      	b.n	8001180 <HAL_RCC_OscConfig+0xd4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0xbc>
 800114e:	4b72      	ldr	r3, [pc, #456]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a71      	ldr	r2, [pc, #452]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a6e      	ldr	r2, [pc, #440]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0xd4>
 8001168:	4b6b      	ldr	r3, [pc, #428]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a6a      	ldr	r2, [pc, #424]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b68      	ldr	r3, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a67      	ldr	r2, [pc, #412]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d013      	beq.n	80011b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fbd6 	bl	8000938 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fbd2 	bl	8000938 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1fa      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0xe4>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fbc2 	bl	8000938 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fbbe 	bl	8000938 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1e6      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ca:	4b53      	ldr	r3, [pc, #332]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x10c>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d063      	beq.n	80012ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e6:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d11c      	bne.n	8001238 <HAL_RCC_OscConfig+0x18c>
 80011fe:	4b46      	ldr	r3, [pc, #280]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d116      	bne.n	8001238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x176>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d001      	beq.n	8001222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e1ba      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4939      	ldr	r1, [pc, #228]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	e03a      	b.n	80012ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d020      	beq.n	8001282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_RCC_OscConfig+0x270>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fb77 	bl	8000938 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fb73 	bl	8000938 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e19b      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4927      	ldr	r1, [pc, #156]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_RCC_OscConfig+0x270>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fb56 	bl	8000938 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fb52 	bl	8000938 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e17a      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d03a      	beq.n	8001330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d019      	beq.n	80012f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_RCC_OscConfig+0x274>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fb36 	bl	8000938 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fb32 	bl	8000938 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e15a      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f000 facc 	bl	800188c <RCC_Delay>
 80012f4:	e01c      	b.n	8001330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_RCC_OscConfig+0x274>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff fb1c 	bl	8000938 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001302:	e00f      	b.n	8001324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff fb18 	bl	8000938 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d908      	bls.n	8001324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e140      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	42420000 	.word	0x42420000
 8001320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	4b9e      	ldr	r3, [pc, #632]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1e9      	bne.n	8001304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a6 	beq.w	800148a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001342:	4b97      	ldr	r3, [pc, #604]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10d      	bne.n	800136a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a93      	ldr	r2, [pc, #588]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b91      	ldr	r3, [pc, #580]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	4b8e      	ldr	r3, [pc, #568]	; (80015a4 <HAL_RCC_OscConfig+0x4f8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d118      	bne.n	80013a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001376:	4b8b      	ldr	r3, [pc, #556]	; (80015a4 <HAL_RCC_OscConfig+0x4f8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a8a      	ldr	r2, [pc, #552]	; (80015a4 <HAL_RCC_OscConfig+0x4f8>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001382:	f7ff fad9 	bl	8000938 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138a:	f7ff fad5 	bl	8000938 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b64      	cmp	r3, #100	; 0x64
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0fd      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	4b81      	ldr	r3, [pc, #516]	; (80015a4 <HAL_RCC_OscConfig+0x4f8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x312>
 80013b0:	4b7b      	ldr	r3, [pc, #492]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4a7a      	ldr	r2, [pc, #488]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6213      	str	r3, [r2, #32]
 80013bc:	e02d      	b.n	800141a <HAL_RCC_OscConfig+0x36e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x334>
 80013c6:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a75      	ldr	r2, [pc, #468]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6213      	str	r3, [r2, #32]
 80013d2:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a72      	ldr	r2, [pc, #456]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	f023 0304 	bic.w	r3, r3, #4
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	e01c      	b.n	800141a <HAL_RCC_OscConfig+0x36e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d10c      	bne.n	8001402 <HAL_RCC_OscConfig+0x356>
 80013e8:	4b6d      	ldr	r3, [pc, #436]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a6c      	ldr	r2, [pc, #432]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6213      	str	r3, [r2, #32]
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4a69      	ldr	r2, [pc, #420]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6213      	str	r3, [r2, #32]
 8001400:	e00b      	b.n	800141a <HAL_RCC_OscConfig+0x36e>
 8001402:	4b67      	ldr	r3, [pc, #412]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a66      	ldr	r2, [pc, #408]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4a63      	ldr	r2, [pc, #396]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	f023 0304 	bic.w	r3, r3, #4
 8001418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d015      	beq.n	800144e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fa89 	bl	8000938 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fa85 	bl	8000938 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e0ab      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001440:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ee      	beq.n	800142a <HAL_RCC_OscConfig+0x37e>
 800144c:	e014      	b.n	8001478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fa73 	bl	8000938 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fa6f 	bl	8000938 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e095      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146c:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ee      	bne.n	8001456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d105      	bne.n	800148a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147e:	4b48      	ldr	r3, [pc, #288]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a47      	ldr	r2, [pc, #284]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8081 	beq.w	8001596 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001494:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d061      	beq.n	8001564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d146      	bne.n	8001536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_RCC_OscConfig+0x4fc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fa43 	bl	8000938 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fa3f 	bl	8000938 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e067      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014dc:	d108      	bne.n	80014f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	492d      	ldr	r1, [pc, #180]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a19      	ldr	r1, [r3, #32]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	430b      	orrs	r3, r1
 8001502:	4927      	ldr	r1, [pc, #156]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_RCC_OscConfig+0x4fc>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fa13 	bl	8000938 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fa0f 	bl	8000938 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e037      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x46a>
 8001534:	e02f      	b.n	8001596 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_RCC_OscConfig+0x4fc>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff f9fc 	bl	8000938 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff f9f8 	bl	8000938 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e020      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x498>
 8001562:	e018      	b.n	8001596 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e013      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	429a      	cmp	r2, r3
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40007000 	.word	0x40007000
 80015a8:	42420060 	.word	0x42420060

080015ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0d0      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b67      	ldr	r3, [pc, #412]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4965      	ldr	r1, [pc, #404]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b8      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a58      	ldr	r2, [pc, #352]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a52      	ldr	r2, [pc, #328]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800162a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	494d      	ldr	r1, [pc, #308]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d040      	beq.n	80016cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d115      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e07f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e073      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06b      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f023 0203 	bic.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4936      	ldr	r1, [pc, #216]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff f94c 	bl	8000938 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff f948 	bl	8000938 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e053      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 020c 	and.w	r2, r3, #12
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1eb      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d210      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4922      	ldr	r1, [pc, #136]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4916      	ldr	r1, [pc, #88]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	490e      	ldr	r1, [pc, #56]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173a:	f000 f821 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 800173e:	4602      	mov	r2, r0
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	490a      	ldr	r1, [pc, #40]	; (8001774 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x1cc>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_ClockConfig+0x1d0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f8aa 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000
 8001770:	40021000 	.word	0x40021000
 8001774:	08003390 	.word	0x08003390
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_GetSysClockFreq+0x94>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x30>
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x36>
 80017ae:	e027      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_RCC_GetSysClockFreq+0x98>)
 80017b2:	613b      	str	r3, [r7, #16]
      break;
 80017b4:	e027      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d010      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_RCC_GetSysClockFreq+0x94>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0c5b      	lsrs	r3, r3, #17
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	4a11      	ldr	r2, [pc, #68]	; (8001820 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_RCC_GetSysClockFreq+0x98>)
 80017e2:	fb02 f203 	mul.w	r2, r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e004      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	613b      	str	r3, [r7, #16]
      break;
 80017fe:	e002      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetSysClockFreq+0x98>)
 8001802:	613b      	str	r3, [r7, #16]
      break;
 8001804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001806:	693b      	ldr	r3, [r7, #16]
}
 8001808:	4618      	mov	r0, r3
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	007a1200 	.word	0x007a1200
 800181c:	080033a8 	.word	0x080033a8
 8001820:	080033b8 	.word	0x080033b8
 8001824:	003d0900 	.word	0x003d0900

08001828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800182c:	4b02      	ldr	r3, [pc, #8]	; (8001838 <HAL_RCC_GetHCLKFreq+0x10>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000000 	.word	0x20000000

0800183c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001840:	f7ff fff2 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 8001844:	4602      	mov	r2, r0
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	4903      	ldr	r1, [pc, #12]	; (8001860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001852:	5ccb      	ldrb	r3, [r1, r3]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	080033a0 	.word	0x080033a0

08001864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001868:	f7ff ffde 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	0adb      	lsrs	r3, r3, #11
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	4903      	ldr	r1, [pc, #12]	; (8001888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	080033a0 	.word	0x080033a0

0800188c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <RCC_Delay+0x34>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <RCC_Delay+0x38>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0a5b      	lsrs	r3, r3, #9
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018a8:	bf00      	nop
  }
  while (Delay --);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1e5a      	subs	r2, r3, #1
 80018ae:	60fa      	str	r2, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f9      	bne.n	80018a8 <RCC_Delay+0x1c>
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20000000 	.word	0x20000000
 80018c4:	10624dd3 	.word	0x10624dd3

080018c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e041      	b.n	800195e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7fe fec4 	bl	800067c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3304      	adds	r3, #4
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f000 f940 	bl	8001b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d001      	beq.n	8001980 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e032      	b.n	80019e6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <HAL_TIM_Base_Start+0x88>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00e      	beq.n	80019b0 <HAL_TIM_Base_Start+0x48>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199a:	d009      	beq.n	80019b0 <HAL_TIM_Base_Start+0x48>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <HAL_TIM_Base_Start+0x8c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d004      	beq.n	80019b0 <HAL_TIM_Base_Start+0x48>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <HAL_TIM_Base_Start+0x90>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d111      	bne.n	80019d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d010      	beq.n	80019e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d2:	e007      	b.n	80019e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40012c00 	.word	0x40012c00
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40000800 	.word	0x40000800

080019fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_TIM_ConfigClockSource+0x1c>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e0b4      	b.n	8001b82 <HAL_TIM_ConfigClockSource+0x186>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a50:	d03e      	beq.n	8001ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8001a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a56:	f200 8087 	bhi.w	8001b68 <HAL_TIM_ConfigClockSource+0x16c>
 8001a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5e:	f000 8086 	beq.w	8001b6e <HAL_TIM_ConfigClockSource+0x172>
 8001a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a66:	d87f      	bhi.n	8001b68 <HAL_TIM_ConfigClockSource+0x16c>
 8001a68:	2b70      	cmp	r3, #112	; 0x70
 8001a6a:	d01a      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8001a6c:	2b70      	cmp	r3, #112	; 0x70
 8001a6e:	d87b      	bhi.n	8001b68 <HAL_TIM_ConfigClockSource+0x16c>
 8001a70:	2b60      	cmp	r3, #96	; 0x60
 8001a72:	d050      	beq.n	8001b16 <HAL_TIM_ConfigClockSource+0x11a>
 8001a74:	2b60      	cmp	r3, #96	; 0x60
 8001a76:	d877      	bhi.n	8001b68 <HAL_TIM_ConfigClockSource+0x16c>
 8001a78:	2b50      	cmp	r3, #80	; 0x50
 8001a7a:	d03c      	beq.n	8001af6 <HAL_TIM_ConfigClockSource+0xfa>
 8001a7c:	2b50      	cmp	r3, #80	; 0x50
 8001a7e:	d873      	bhi.n	8001b68 <HAL_TIM_ConfigClockSource+0x16c>
 8001a80:	2b40      	cmp	r3, #64	; 0x40
 8001a82:	d058      	beq.n	8001b36 <HAL_TIM_ConfigClockSource+0x13a>
 8001a84:	2b40      	cmp	r3, #64	; 0x40
 8001a86:	d86f      	bhi.n	8001b68 <HAL_TIM_ConfigClockSource+0x16c>
 8001a88:	2b30      	cmp	r3, #48	; 0x30
 8001a8a:	d064      	beq.n	8001b56 <HAL_TIM_ConfigClockSource+0x15a>
 8001a8c:	2b30      	cmp	r3, #48	; 0x30
 8001a8e:	d86b      	bhi.n	8001b68 <HAL_TIM_ConfigClockSource+0x16c>
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d060      	beq.n	8001b56 <HAL_TIM_ConfigClockSource+0x15a>
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d867      	bhi.n	8001b68 <HAL_TIM_ConfigClockSource+0x16c>
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d05c      	beq.n	8001b56 <HAL_TIM_ConfigClockSource+0x15a>
 8001a9c:	2b10      	cmp	r3, #16
 8001a9e:	d05a      	beq.n	8001b56 <HAL_TIM_ConfigClockSource+0x15a>
 8001aa0:	e062      	b.n	8001b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f000 f950 	bl	8001d56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	609a      	str	r2, [r3, #8]
      break;
 8001ace:	e04f      	b.n	8001b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6899      	ldr	r1, [r3, #8]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f000 f939 	bl	8001d56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001af2:	609a      	str	r2, [r3, #8]
      break;
 8001af4:	e03c      	b.n	8001b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6859      	ldr	r1, [r3, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f000 f8b0 	bl	8001c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2150      	movs	r1, #80	; 0x50
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f907 	bl	8001d22 <TIM_ITRx_SetConfig>
      break;
 8001b14:	e02c      	b.n	8001b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	461a      	mov	r2, r3
 8001b24:	f000 f8ce 	bl	8001cc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2160      	movs	r1, #96	; 0x60
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f8f7 	bl	8001d22 <TIM_ITRx_SetConfig>
      break;
 8001b34:	e01c      	b.n	8001b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6859      	ldr	r1, [r3, #4]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f000 f890 	bl	8001c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2140      	movs	r1, #64	; 0x40
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f8e7 	bl	8001d22 <TIM_ITRx_SetConfig>
      break;
 8001b54:	e00c      	b.n	8001b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4610      	mov	r0, r2
 8001b62:	f000 f8de 	bl	8001d22 <TIM_ITRx_SetConfig>
      break;
 8001b66:	e003      	b.n	8001b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b6c:	e000      	b.n	8001b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <TIM_Base_SetConfig+0xd0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00b      	beq.n	8001bbc <TIM_Base_SetConfig+0x30>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001baa:	d007      	beq.n	8001bbc <TIM_Base_SetConfig+0x30>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <TIM_Base_SetConfig+0xd4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d003      	beq.n	8001bbc <TIM_Base_SetConfig+0x30>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a2b      	ldr	r2, [pc, #172]	; (8001c64 <TIM_Base_SetConfig+0xd8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d108      	bne.n	8001bce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <TIM_Base_SetConfig+0xd0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00b      	beq.n	8001bee <TIM_Base_SetConfig+0x62>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bdc:	d007      	beq.n	8001bee <TIM_Base_SetConfig+0x62>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <TIM_Base_SetConfig+0xd4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d003      	beq.n	8001bee <TIM_Base_SetConfig+0x62>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <TIM_Base_SetConfig+0xd8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d108      	bne.n	8001c00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <TIM_Base_SetConfig+0xd0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d103      	bne.n	8001c34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f023 0201 	bic.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]
  }
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40000800 	.word	0x40000800

08001c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	f023 0201 	bic.w	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f023 030a 	bic.w	r3, r3, #10
 8001ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	621a      	str	r2, [r3, #32]
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	f023 0210 	bic.w	r2, r3, #16
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	031b      	lsls	r3, r3, #12
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	621a      	str	r2, [r3, #32]
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f043 0307 	orr.w	r3, r3, #7
 8001d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	609a      	str	r2, [r3, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b087      	sub	sp, #28
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	021a      	lsls	r2, r3, #8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	609a      	str	r2, [r3, #8]
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e046      	b.n	8001e3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00e      	beq.n	8001e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d009      	beq.n	8001e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d004      	beq.n	8001e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10c      	bne.n	8001e28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	40012c00 	.word	0x40012c00
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800

08001e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e042      	b.n	8001ee8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fc1e 	bl	80006b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fd63 	bl	8002960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d175      	bne.n	8001ffc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <HAL_UART_Transmit+0x2c>
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e06e      	b.n	8001ffe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2221      	movs	r2, #33	; 0x21
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f2e:	f7fe fd03 	bl	8000938 <HAL_GetTick>
 8001f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	88fa      	ldrh	r2, [r7, #6]
 8001f38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	88fa      	ldrh	r2, [r7, #6]
 8001f3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f48:	d108      	bne.n	8001f5c <HAL_UART_Transmit+0x6c>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d104      	bne.n	8001f5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	e003      	b.n	8001f64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f64:	e02e      	b.n	8001fc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fb01 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e03a      	b.n	8001ffe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	e007      	b.n	8001fb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1cb      	bne.n	8001f66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2140      	movs	r1, #64	; 0x40
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 facd 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e006      	b.n	8001ffe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0ba      	sub	sp, #232	; 0xe8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800203a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800204e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_UART_IRQHandler+0x66>
 800205a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fbbc 	bl	80027e4 <UART_Receive_IT>
      return;
 800206c:	e25b      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800206e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80de 	beq.w	8002234 <HAL_UART_IRQHandler+0x22c>
 8002078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002088:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80d1 	beq.w	8002234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_UART_IRQHandler+0xae>
 800209e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <HAL_UART_IRQHandler+0xd2>
 80020c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f043 0202 	orr.w	r2, r3, #2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_UART_IRQHandler+0xf6>
 80020e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f043 0204 	orr.w	r2, r3, #4
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d011      	beq.n	800212e <HAL_UART_IRQHandler+0x126>
 800210a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f043 0208 	orr.w	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 81f2 	beq.w	800251c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_UART_IRQHandler+0x14e>
 8002144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fb47 	bl	80027e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d103      	bne.n	8002182 <HAL_UART_IRQHandler+0x17a>
 800217a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d04f      	beq.n	8002222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fa51 	bl	800262a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d041      	beq.n	800221a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3314      	adds	r3, #20
 800219c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021a4:	e853 3f00 	ldrex	r3, [r3]
 80021a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3314      	adds	r3, #20
 80021be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021d2:	e841 2300 	strex	r3, r2, [r1]
 80021d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1d9      	bne.n	8002196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d013      	beq.n	8002212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	4a7e      	ldr	r2, [pc, #504]	; (80023e8 <HAL_UART_IRQHandler+0x3e0>)
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fd14 	bl	8000c24 <HAL_DMA_Abort_IT>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800220c:	4610      	mov	r0, r2
 800220e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002210:	e00e      	b.n	8002230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f99c 	bl	8002550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002218:	e00a      	b.n	8002230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f998 	bl	8002550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002220:	e006      	b.n	8002230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f994 	bl	8002550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800222e:	e175      	b.n	800251c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002230:	bf00      	nop
    return;
 8002232:	e173      	b.n	800251c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 814f 	bne.w	80024dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8148 	beq.w	80024dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800224c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8141 	beq.w	80024dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80b6 	beq.w	80023ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800228c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8145 	beq.w	8002520 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800229a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800229e:	429a      	cmp	r2, r3
 80022a0:	f080 813e 	bcs.w	8002520 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	f000 8088 	beq.w	80023c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022c6:	e853 3f00 	ldrex	r3, [r3]
 80022ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022e4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022f4:	e841 2300 	strex	r3, r2, [r1]
 80022f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80022fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1d9      	bne.n	80022b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3314      	adds	r3, #20
 800230a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800230e:	e853 3f00 	ldrex	r3, [r3]
 8002312:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3314      	adds	r3, #20
 8002324:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002328:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800232c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002330:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002334:	e841 2300 	strex	r3, r2, [r1]
 8002338:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800233a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e1      	bne.n	8002304 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3314      	adds	r3, #20
 8002346:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800234a:	e853 3f00 	ldrex	r3, [r3]
 800234e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3314      	adds	r3, #20
 8002360:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002364:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002366:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002368:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800236a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800236c:	e841 2300 	strex	r3, r2, [r1]
 8002370:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e3      	bne.n	8002340 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	330c      	adds	r3, #12
 800238c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	e853 3f00 	ldrex	r3, [r3]
 8002394:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002398:	f023 0310 	bic.w	r3, r3, #16
 800239c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	330c      	adds	r3, #12
 80023a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80023ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023b2:	e841 2300 	strex	r3, r2, [r1]
 80023b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e3      	bne.n	8002386 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fbf3 	bl	8000bae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8bf 	bl	8002562 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023e4:	e09c      	b.n	8002520 <HAL_UART_IRQHandler+0x518>
 80023e6:	bf00      	nop
 80023e8:	080026ef 	.word	0x080026ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 808e 	beq.w	8002524 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8089 	beq.w	8002524 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002428:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002436:	647a      	str	r2, [r7, #68]	; 0x44
 8002438:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800243c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800243e:	e841 2300 	strex	r3, r2, [r1]
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1e3      	bne.n	8002412 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3314      	adds	r3, #20
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	623b      	str	r3, [r7, #32]
   return(result);
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3314      	adds	r3, #20
 800246a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800246e:	633a      	str	r2, [r7, #48]	; 0x30
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e3      	bne.n	800244a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	e853 3f00 	ldrex	r3, [r3]
 800249e:	60fb      	str	r3, [r7, #12]
   return(result);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0310 	bic.w	r3, r3, #16
 80024a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024b4:	61fa      	str	r2, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b8:	69b9      	ldr	r1, [r7, #24]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	e841 2300 	strex	r3, r2, [r1]
 80024c0:	617b      	str	r3, [r7, #20]
   return(result);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e3      	bne.n	8002490 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f844 	bl	8002562 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024da:	e023      	b.n	8002524 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_UART_IRQHandler+0x4f4>
 80024e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f90e 	bl	8002716 <UART_Transmit_IT>
    return;
 80024fa:	e014      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00e      	beq.n	8002526 <HAL_UART_IRQHandler+0x51e>
 8002508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800250c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f94d 	bl	80027b4 <UART_EndTransmit_IT>
    return;
 800251a:	e004      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
    return;
 800251c:	bf00      	nop
 800251e:	e002      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
      return;
 8002520:	bf00      	nop
 8002522:	e000      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
      return;
 8002524:	bf00      	nop
  }
}
 8002526:	37e8      	adds	r7, #232	; 0xe8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002588:	e03b      	b.n	8002602 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d037      	beq.n	8002602 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7fe f9d1 	bl	8000938 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	6a3a      	ldr	r2, [r7, #32]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d302      	bcc.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e03a      	b.n	8002622 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d023      	beq.n	8002602 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b80      	cmp	r3, #128	; 0x80
 80025be:	d020      	beq.n	8002602 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d01d      	beq.n	8002602 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d116      	bne.n	8002602 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f81d 	bl	800262a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2208      	movs	r2, #8
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4013      	ands	r3, r2
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	429a      	cmp	r2, r3
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	429a      	cmp	r2, r3
 800261e:	d0b4      	beq.n	800258a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800262a:	b480      	push	{r7}
 800262c:	b095      	sub	sp, #84	; 0x54
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	330c      	adds	r3, #12
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	e853 3f00 	ldrex	r3, [r3]
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	330c      	adds	r3, #12
 8002650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002652:	643a      	str	r2, [r7, #64]	; 0x40
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800265a:	e841 2300 	strex	r3, r2, [r1]
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e5      	bne.n	8002632 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	61fb      	str	r3, [r7, #28]
   return(result);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	64bb      	str	r3, [r7, #72]	; 0x48
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3314      	adds	r3, #20
 8002684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800268c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e5      	bne.n	8002666 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d119      	bne.n	80026d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f023 0310 	bic.w	r3, r3, #16
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	330c      	adds	r3, #12
 80026c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026c2:	61ba      	str	r2, [r7, #24]
 80026c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	6979      	ldr	r1, [r7, #20]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	e841 2300 	strex	r3, r2, [r1]
 80026ce:	613b      	str	r3, [r7, #16]
   return(result);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e5      	bne.n	80026a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026e4:	bf00      	nop
 80026e6:	3754      	adds	r7, #84	; 0x54
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff ff21 	bl	8002550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b21      	cmp	r3, #33	; 0x21
 8002728:	d13e      	bne.n	80027a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002732:	d114      	bne.n	800275e <UART_Transmit_IT+0x48>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d110      	bne.n	800275e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002750:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	1c9a      	adds	r2, r3, #2
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	621a      	str	r2, [r3, #32]
 800275c:	e008      	b.n	8002770 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6211      	str	r1, [r2, #32]
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29b      	uxth	r3, r3
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4619      	mov	r1, r3
 800277e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10f      	bne.n	80027a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002792:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
  }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fea9 	bl	800252c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08c      	sub	sp, #48	; 0x30
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b22      	cmp	r3, #34	; 0x22
 80027f6:	f040 80ae 	bne.w	8002956 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	d117      	bne.n	8002834 <UART_Receive_IT+0x50>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d113      	bne.n	8002834 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	b29b      	uxth	r3, r3
 800281e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002822:	b29a      	uxth	r2, r3
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	1c9a      	adds	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
 8002832:	e026      	b.n	8002882 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002846:	d007      	beq.n	8002858 <UART_Receive_IT+0x74>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <UART_Receive_IT+0x82>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e008      	b.n	8002878 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002872:	b2da      	uxtb	r2, r3
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29b      	uxth	r3, r3
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4619      	mov	r1, r3
 8002890:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002892:	2b00      	cmp	r3, #0
 8002894:	d15d      	bne.n	8002952 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0220 	bic.w	r2, r2, #32
 80028a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d135      	bne.n	8002948 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	613b      	str	r3, [r7, #16]
   return(result);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f023 0310 	bic.w	r3, r3, #16
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002902:	623a      	str	r2, [r7, #32]
 8002904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002906:	69f9      	ldr	r1, [r7, #28]
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	e841 2300 	strex	r3, r2, [r1]
 800290e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1e5      	bne.n	80028e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b10      	cmp	r3, #16
 8002922:	d10a      	bne.n	800293a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fe0e 	bl	8002562 <HAL_UARTEx_RxEventCallback>
 8002946:	e002      	b.n	800294e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fdf8 	bl	800253e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e002      	b.n	8002958 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3730      	adds	r7, #48	; 0x30
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800299a:	f023 030c 	bic.w	r3, r3, #12
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <UART_SetConfig+0x114>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d103      	bne.n	80029d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029c8:	f7fe ff4c 	bl	8001864 <HAL_RCC_GetPCLK2Freq>
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	e002      	b.n	80029d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029d0:	f7fe ff34 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 80029d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009a      	lsls	r2, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <UART_SetConfig+0x118>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	0119      	lsls	r1, r3, #4
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009a      	lsls	r2, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <UART_SetConfig+0x118>)
 8002a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	2064      	movs	r0, #100	; 0x64
 8002a16:	fb00 f303 	mul.w	r3, r0, r3
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	3332      	adds	r3, #50	; 0x32
 8002a20:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <UART_SetConfig+0x118>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a2c:	4419      	add	r1, r3
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009a      	lsls	r2, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <UART_SetConfig+0x118>)
 8002a46:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2064      	movs	r0, #100	; 0x64
 8002a4e:	fb00 f303 	mul.w	r3, r0, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	3332      	adds	r3, #50	; 0x32
 8002a58:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <UART_SetConfig+0x118>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	440a      	add	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40013800 	.word	0x40013800
 8002a78:	51eb851f 	.word	0x51eb851f

08002a7c <__errno>:
 8002a7c:	4b01      	ldr	r3, [pc, #4]	; (8002a84 <__errno+0x8>)
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	2000000c 	.word	0x2000000c

08002a88 <__libc_init_array>:
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	4d0c      	ldr	r5, [pc, #48]	; (8002ac0 <__libc_init_array+0x38>)
 8002a8e:	4c0d      	ldr	r4, [pc, #52]	; (8002ac4 <__libc_init_array+0x3c>)
 8002a90:	1b64      	subs	r4, r4, r5
 8002a92:	10a4      	asrs	r4, r4, #2
 8002a94:	42a6      	cmp	r6, r4
 8002a96:	d109      	bne.n	8002aac <__libc_init_array+0x24>
 8002a98:	f000 fc5c 	bl	8003354 <_init>
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	4d0a      	ldr	r5, [pc, #40]	; (8002ac8 <__libc_init_array+0x40>)
 8002aa0:	4c0a      	ldr	r4, [pc, #40]	; (8002acc <__libc_init_array+0x44>)
 8002aa2:	1b64      	subs	r4, r4, r5
 8002aa4:	10a4      	asrs	r4, r4, #2
 8002aa6:	42a6      	cmp	r6, r4
 8002aa8:	d105      	bne.n	8002ab6 <__libc_init_array+0x2e>
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
 8002aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab0:	4798      	blx	r3
 8002ab2:	3601      	adds	r6, #1
 8002ab4:	e7ee      	b.n	8002a94 <__libc_init_array+0xc>
 8002ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aba:	4798      	blx	r3
 8002abc:	3601      	adds	r6, #1
 8002abe:	e7f2      	b.n	8002aa6 <__libc_init_array+0x1e>
 8002ac0:	080033f0 	.word	0x080033f0
 8002ac4:	080033f0 	.word	0x080033f0
 8002ac8:	080033f0 	.word	0x080033f0
 8002acc:	080033f4 	.word	0x080033f4

08002ad0 <memset>:
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4402      	add	r2, r0
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d100      	bne.n	8002ada <memset+0xa>
 8002ad8:	4770      	bx	lr
 8002ada:	f803 1b01 	strb.w	r1, [r3], #1
 8002ade:	e7f9      	b.n	8002ad4 <memset+0x4>

08002ae0 <siprintf>:
 8002ae0:	b40e      	push	{r1, r2, r3}
 8002ae2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ae6:	b500      	push	{lr}
 8002ae8:	b09c      	sub	sp, #112	; 0x70
 8002aea:	ab1d      	add	r3, sp, #116	; 0x74
 8002aec:	9002      	str	r0, [sp, #8]
 8002aee:	9006      	str	r0, [sp, #24]
 8002af0:	9107      	str	r1, [sp, #28]
 8002af2:	9104      	str	r1, [sp, #16]
 8002af4:	4808      	ldr	r0, [pc, #32]	; (8002b18 <siprintf+0x38>)
 8002af6:	4909      	ldr	r1, [pc, #36]	; (8002b1c <siprintf+0x3c>)
 8002af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002afc:	9105      	str	r1, [sp, #20]
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	a902      	add	r1, sp, #8
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	f000 f868 	bl	8002bd8 <_svfiprintf_r>
 8002b08:	2200      	movs	r2, #0
 8002b0a:	9b02      	ldr	r3, [sp, #8]
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	b01c      	add	sp, #112	; 0x70
 8002b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b14:	b003      	add	sp, #12
 8002b16:	4770      	bx	lr
 8002b18:	2000000c 	.word	0x2000000c
 8002b1c:	ffff0208 	.word	0xffff0208

08002b20 <__ssputs_r>:
 8002b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b24:	688e      	ldr	r6, [r1, #8]
 8002b26:	4682      	mov	sl, r0
 8002b28:	429e      	cmp	r6, r3
 8002b2a:	460c      	mov	r4, r1
 8002b2c:	4690      	mov	r8, r2
 8002b2e:	461f      	mov	r7, r3
 8002b30:	d838      	bhi.n	8002ba4 <__ssputs_r+0x84>
 8002b32:	898a      	ldrh	r2, [r1, #12]
 8002b34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b38:	d032      	beq.n	8002ba0 <__ssputs_r+0x80>
 8002b3a:	6825      	ldr	r5, [r4, #0]
 8002b3c:	6909      	ldr	r1, [r1, #16]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	eba5 0901 	sub.w	r9, r5, r1
 8002b44:	6965      	ldr	r5, [r4, #20]
 8002b46:	444b      	add	r3, r9
 8002b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b50:	106d      	asrs	r5, r5, #1
 8002b52:	429d      	cmp	r5, r3
 8002b54:	bf38      	it	cc
 8002b56:	461d      	movcc	r5, r3
 8002b58:	0553      	lsls	r3, r2, #21
 8002b5a:	d531      	bpl.n	8002bc0 <__ssputs_r+0xa0>
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f000 fb53 	bl	8003208 <_malloc_r>
 8002b62:	4606      	mov	r6, r0
 8002b64:	b950      	cbnz	r0, 8002b7c <__ssputs_r+0x5c>
 8002b66:	230c      	movs	r3, #12
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	f8ca 3000 	str.w	r3, [sl]
 8002b70:	89a3      	ldrh	r3, [r4, #12]
 8002b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b76:	81a3      	strh	r3, [r4, #12]
 8002b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b7c:	464a      	mov	r2, r9
 8002b7e:	6921      	ldr	r1, [r4, #16]
 8002b80:	f000 face 	bl	8003120 <memcpy>
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	6126      	str	r6, [r4, #16]
 8002b92:	444e      	add	r6, r9
 8002b94:	6026      	str	r6, [r4, #0]
 8002b96:	463e      	mov	r6, r7
 8002b98:	6165      	str	r5, [r4, #20]
 8002b9a:	eba5 0509 	sub.w	r5, r5, r9
 8002b9e:	60a5      	str	r5, [r4, #8]
 8002ba0:	42be      	cmp	r6, r7
 8002ba2:	d900      	bls.n	8002ba6 <__ssputs_r+0x86>
 8002ba4:	463e      	mov	r6, r7
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	4641      	mov	r1, r8
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	f000 fac6 	bl	800313c <memmove>
 8002bb0:	68a3      	ldr	r3, [r4, #8]
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	1b9b      	subs	r3, r3, r6
 8002bb6:	4432      	add	r2, r6
 8002bb8:	2000      	movs	r0, #0
 8002bba:	60a3      	str	r3, [r4, #8]
 8002bbc:	6022      	str	r2, [r4, #0]
 8002bbe:	e7db      	b.n	8002b78 <__ssputs_r+0x58>
 8002bc0:	462a      	mov	r2, r5
 8002bc2:	f000 fb7b 	bl	80032bc <_realloc_r>
 8002bc6:	4606      	mov	r6, r0
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d1e1      	bne.n	8002b90 <__ssputs_r+0x70>
 8002bcc:	4650      	mov	r0, sl
 8002bce:	6921      	ldr	r1, [r4, #16]
 8002bd0:	f000 face 	bl	8003170 <_free_r>
 8002bd4:	e7c7      	b.n	8002b66 <__ssputs_r+0x46>
	...

08002bd8 <_svfiprintf_r>:
 8002bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bdc:	4698      	mov	r8, r3
 8002bde:	898b      	ldrh	r3, [r1, #12]
 8002be0:	4607      	mov	r7, r0
 8002be2:	061b      	lsls	r3, r3, #24
 8002be4:	460d      	mov	r5, r1
 8002be6:	4614      	mov	r4, r2
 8002be8:	b09d      	sub	sp, #116	; 0x74
 8002bea:	d50e      	bpl.n	8002c0a <_svfiprintf_r+0x32>
 8002bec:	690b      	ldr	r3, [r1, #16]
 8002bee:	b963      	cbnz	r3, 8002c0a <_svfiprintf_r+0x32>
 8002bf0:	2140      	movs	r1, #64	; 0x40
 8002bf2:	f000 fb09 	bl	8003208 <_malloc_r>
 8002bf6:	6028      	str	r0, [r5, #0]
 8002bf8:	6128      	str	r0, [r5, #16]
 8002bfa:	b920      	cbnz	r0, 8002c06 <_svfiprintf_r+0x2e>
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	e0d1      	b.n	8002daa <_svfiprintf_r+0x1d2>
 8002c06:	2340      	movs	r3, #64	; 0x40
 8002c08:	616b      	str	r3, [r5, #20]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c0e:	2320      	movs	r3, #32
 8002c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c14:	2330      	movs	r3, #48	; 0x30
 8002c16:	f04f 0901 	mov.w	r9, #1
 8002c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002dc4 <_svfiprintf_r+0x1ec>
 8002c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c26:	4623      	mov	r3, r4
 8002c28:	469a      	mov	sl, r3
 8002c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c2e:	b10a      	cbz	r2, 8002c34 <_svfiprintf_r+0x5c>
 8002c30:	2a25      	cmp	r2, #37	; 0x25
 8002c32:	d1f9      	bne.n	8002c28 <_svfiprintf_r+0x50>
 8002c34:	ebba 0b04 	subs.w	fp, sl, r4
 8002c38:	d00b      	beq.n	8002c52 <_svfiprintf_r+0x7a>
 8002c3a:	465b      	mov	r3, fp
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	4638      	mov	r0, r7
 8002c42:	f7ff ff6d 	bl	8002b20 <__ssputs_r>
 8002c46:	3001      	adds	r0, #1
 8002c48:	f000 80aa 	beq.w	8002da0 <_svfiprintf_r+0x1c8>
 8002c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c4e:	445a      	add	r2, fp
 8002c50:	9209      	str	r2, [sp, #36]	; 0x24
 8002c52:	f89a 3000 	ldrb.w	r3, [sl]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80a2 	beq.w	8002da0 <_svfiprintf_r+0x1c8>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c66:	f10a 0a01 	add.w	sl, sl, #1
 8002c6a:	9304      	str	r3, [sp, #16]
 8002c6c:	9307      	str	r3, [sp, #28]
 8002c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c72:	931a      	str	r3, [sp, #104]	; 0x68
 8002c74:	4654      	mov	r4, sl
 8002c76:	2205      	movs	r2, #5
 8002c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c7c:	4851      	ldr	r0, [pc, #324]	; (8002dc4 <_svfiprintf_r+0x1ec>)
 8002c7e:	f000 fa41 	bl	8003104 <memchr>
 8002c82:	9a04      	ldr	r2, [sp, #16]
 8002c84:	b9d8      	cbnz	r0, 8002cbe <_svfiprintf_r+0xe6>
 8002c86:	06d0      	lsls	r0, r2, #27
 8002c88:	bf44      	itt	mi
 8002c8a:	2320      	movmi	r3, #32
 8002c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c90:	0711      	lsls	r1, r2, #28
 8002c92:	bf44      	itt	mi
 8002c94:	232b      	movmi	r3, #43	; 0x2b
 8002c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002ca0:	d015      	beq.n	8002cce <_svfiprintf_r+0xf6>
 8002ca2:	4654      	mov	r4, sl
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f04f 0c0a 	mov.w	ip, #10
 8002caa:	9a07      	ldr	r2, [sp, #28]
 8002cac:	4621      	mov	r1, r4
 8002cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cb2:	3b30      	subs	r3, #48	; 0x30
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	d94e      	bls.n	8002d56 <_svfiprintf_r+0x17e>
 8002cb8:	b1b0      	cbz	r0, 8002ce8 <_svfiprintf_r+0x110>
 8002cba:	9207      	str	r2, [sp, #28]
 8002cbc:	e014      	b.n	8002ce8 <_svfiprintf_r+0x110>
 8002cbe:	eba0 0308 	sub.w	r3, r0, r8
 8002cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	46a2      	mov	sl, r4
 8002cca:	9304      	str	r3, [sp, #16]
 8002ccc:	e7d2      	b.n	8002c74 <_svfiprintf_r+0x9c>
 8002cce:	9b03      	ldr	r3, [sp, #12]
 8002cd0:	1d19      	adds	r1, r3, #4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	9103      	str	r1, [sp, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bfbb      	ittet	lt
 8002cda:	425b      	neglt	r3, r3
 8002cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8002ce0:	9307      	strge	r3, [sp, #28]
 8002ce2:	9307      	strlt	r3, [sp, #28]
 8002ce4:	bfb8      	it	lt
 8002ce6:	9204      	strlt	r2, [sp, #16]
 8002ce8:	7823      	ldrb	r3, [r4, #0]
 8002cea:	2b2e      	cmp	r3, #46	; 0x2e
 8002cec:	d10c      	bne.n	8002d08 <_svfiprintf_r+0x130>
 8002cee:	7863      	ldrb	r3, [r4, #1]
 8002cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf2:	d135      	bne.n	8002d60 <_svfiprintf_r+0x188>
 8002cf4:	9b03      	ldr	r3, [sp, #12]
 8002cf6:	3402      	adds	r4, #2
 8002cf8:	1d1a      	adds	r2, r3, #4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	9203      	str	r2, [sp, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bfb8      	it	lt
 8002d02:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d06:	9305      	str	r3, [sp, #20]
 8002d08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002dd4 <_svfiprintf_r+0x1fc>
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	4650      	mov	r0, sl
 8002d10:	7821      	ldrb	r1, [r4, #0]
 8002d12:	f000 f9f7 	bl	8003104 <memchr>
 8002d16:	b140      	cbz	r0, 8002d2a <_svfiprintf_r+0x152>
 8002d18:	2340      	movs	r3, #64	; 0x40
 8002d1a:	eba0 000a 	sub.w	r0, r0, sl
 8002d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8002d22:	9b04      	ldr	r3, [sp, #16]
 8002d24:	3401      	adds	r4, #1
 8002d26:	4303      	orrs	r3, r0
 8002d28:	9304      	str	r3, [sp, #16]
 8002d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d2e:	2206      	movs	r2, #6
 8002d30:	4825      	ldr	r0, [pc, #148]	; (8002dc8 <_svfiprintf_r+0x1f0>)
 8002d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d36:	f000 f9e5 	bl	8003104 <memchr>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d038      	beq.n	8002db0 <_svfiprintf_r+0x1d8>
 8002d3e:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <_svfiprintf_r+0x1f4>)
 8002d40:	bb1b      	cbnz	r3, 8002d8a <_svfiprintf_r+0x1b2>
 8002d42:	9b03      	ldr	r3, [sp, #12]
 8002d44:	3307      	adds	r3, #7
 8002d46:	f023 0307 	bic.w	r3, r3, #7
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	9303      	str	r3, [sp, #12]
 8002d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d50:	4433      	add	r3, r6
 8002d52:	9309      	str	r3, [sp, #36]	; 0x24
 8002d54:	e767      	b.n	8002c26 <_svfiprintf_r+0x4e>
 8002d56:	460c      	mov	r4, r1
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d5e:	e7a5      	b.n	8002cac <_svfiprintf_r+0xd4>
 8002d60:	2300      	movs	r3, #0
 8002d62:	f04f 0c0a 	mov.w	ip, #10
 8002d66:	4619      	mov	r1, r3
 8002d68:	3401      	adds	r4, #1
 8002d6a:	9305      	str	r3, [sp, #20]
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d72:	3a30      	subs	r2, #48	; 0x30
 8002d74:	2a09      	cmp	r2, #9
 8002d76:	d903      	bls.n	8002d80 <_svfiprintf_r+0x1a8>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0c5      	beq.n	8002d08 <_svfiprintf_r+0x130>
 8002d7c:	9105      	str	r1, [sp, #20]
 8002d7e:	e7c3      	b.n	8002d08 <_svfiprintf_r+0x130>
 8002d80:	4604      	mov	r4, r0
 8002d82:	2301      	movs	r3, #1
 8002d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d88:	e7f0      	b.n	8002d6c <_svfiprintf_r+0x194>
 8002d8a:	ab03      	add	r3, sp, #12
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	462a      	mov	r2, r5
 8002d90:	4638      	mov	r0, r7
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <_svfiprintf_r+0x1f8>)
 8002d94:	a904      	add	r1, sp, #16
 8002d96:	f3af 8000 	nop.w
 8002d9a:	1c42      	adds	r2, r0, #1
 8002d9c:	4606      	mov	r6, r0
 8002d9e:	d1d6      	bne.n	8002d4e <_svfiprintf_r+0x176>
 8002da0:	89ab      	ldrh	r3, [r5, #12]
 8002da2:	065b      	lsls	r3, r3, #25
 8002da4:	f53f af2c 	bmi.w	8002c00 <_svfiprintf_r+0x28>
 8002da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002daa:	b01d      	add	sp, #116	; 0x74
 8002dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db0:	ab03      	add	r3, sp, #12
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	462a      	mov	r2, r5
 8002db6:	4638      	mov	r0, r7
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <_svfiprintf_r+0x1f8>)
 8002dba:	a904      	add	r1, sp, #16
 8002dbc:	f000 f87c 	bl	8002eb8 <_printf_i>
 8002dc0:	e7eb      	b.n	8002d9a <_svfiprintf_r+0x1c2>
 8002dc2:	bf00      	nop
 8002dc4:	080033ba 	.word	0x080033ba
 8002dc8:	080033c4 	.word	0x080033c4
 8002dcc:	00000000 	.word	0x00000000
 8002dd0:	08002b21 	.word	0x08002b21
 8002dd4:	080033c0 	.word	0x080033c0

08002dd8 <_printf_common>:
 8002dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ddc:	4616      	mov	r6, r2
 8002dde:	4699      	mov	r9, r3
 8002de0:	688a      	ldr	r2, [r1, #8]
 8002de2:	690b      	ldr	r3, [r1, #16]
 8002de4:	4607      	mov	r7, r0
 8002de6:	4293      	cmp	r3, r2
 8002de8:	bfb8      	it	lt
 8002dea:	4613      	movlt	r3, r2
 8002dec:	6033      	str	r3, [r6, #0]
 8002dee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002df2:	460c      	mov	r4, r1
 8002df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002df8:	b10a      	cbz	r2, 8002dfe <_printf_common+0x26>
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	6033      	str	r3, [r6, #0]
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	0699      	lsls	r1, r3, #26
 8002e02:	bf42      	ittt	mi
 8002e04:	6833      	ldrmi	r3, [r6, #0]
 8002e06:	3302      	addmi	r3, #2
 8002e08:	6033      	strmi	r3, [r6, #0]
 8002e0a:	6825      	ldr	r5, [r4, #0]
 8002e0c:	f015 0506 	ands.w	r5, r5, #6
 8002e10:	d106      	bne.n	8002e20 <_printf_common+0x48>
 8002e12:	f104 0a19 	add.w	sl, r4, #25
 8002e16:	68e3      	ldr	r3, [r4, #12]
 8002e18:	6832      	ldr	r2, [r6, #0]
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	42ab      	cmp	r3, r5
 8002e1e:	dc28      	bgt.n	8002e72 <_printf_common+0x9a>
 8002e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e24:	1e13      	subs	r3, r2, #0
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	bf18      	it	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	0692      	lsls	r2, r2, #26
 8002e2e:	d42d      	bmi.n	8002e8c <_printf_common+0xb4>
 8002e30:	4649      	mov	r1, r9
 8002e32:	4638      	mov	r0, r7
 8002e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e38:	47c0      	blx	r8
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	d020      	beq.n	8002e80 <_printf_common+0xa8>
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	68e5      	ldr	r5, [r4, #12]
 8002e42:	f003 0306 	and.w	r3, r3, #6
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	bf18      	it	ne
 8002e4a:	2500      	movne	r5, #0
 8002e4c:	6832      	ldr	r2, [r6, #0]
 8002e4e:	f04f 0600 	mov.w	r6, #0
 8002e52:	68a3      	ldr	r3, [r4, #8]
 8002e54:	bf08      	it	eq
 8002e56:	1aad      	subeq	r5, r5, r2
 8002e58:	6922      	ldr	r2, [r4, #16]
 8002e5a:	bf08      	it	eq
 8002e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e60:	4293      	cmp	r3, r2
 8002e62:	bfc4      	itt	gt
 8002e64:	1a9b      	subgt	r3, r3, r2
 8002e66:	18ed      	addgt	r5, r5, r3
 8002e68:	341a      	adds	r4, #26
 8002e6a:	42b5      	cmp	r5, r6
 8002e6c:	d11a      	bne.n	8002ea4 <_printf_common+0xcc>
 8002e6e:	2000      	movs	r0, #0
 8002e70:	e008      	b.n	8002e84 <_printf_common+0xac>
 8002e72:	2301      	movs	r3, #1
 8002e74:	4652      	mov	r2, sl
 8002e76:	4649      	mov	r1, r9
 8002e78:	4638      	mov	r0, r7
 8002e7a:	47c0      	blx	r8
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	d103      	bne.n	8002e88 <_printf_common+0xb0>
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e88:	3501      	adds	r5, #1
 8002e8a:	e7c4      	b.n	8002e16 <_printf_common+0x3e>
 8002e8c:	2030      	movs	r0, #48	; 0x30
 8002e8e:	18e1      	adds	r1, r4, r3
 8002e90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e9a:	4422      	add	r2, r4
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ea2:	e7c5      	b.n	8002e30 <_printf_common+0x58>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	4622      	mov	r2, r4
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	4638      	mov	r0, r7
 8002eac:	47c0      	blx	r8
 8002eae:	3001      	adds	r0, #1
 8002eb0:	d0e6      	beq.n	8002e80 <_printf_common+0xa8>
 8002eb2:	3601      	adds	r6, #1
 8002eb4:	e7d9      	b.n	8002e6a <_printf_common+0x92>
	...

08002eb8 <_printf_i>:
 8002eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	7e27      	ldrb	r7, [r4, #24]
 8002ec0:	4691      	mov	r9, r2
 8002ec2:	2f78      	cmp	r7, #120	; 0x78
 8002ec4:	4680      	mov	r8, r0
 8002ec6:	469a      	mov	sl, r3
 8002ec8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ece:	d807      	bhi.n	8002ee0 <_printf_i+0x28>
 8002ed0:	2f62      	cmp	r7, #98	; 0x62
 8002ed2:	d80a      	bhi.n	8002eea <_printf_i+0x32>
 8002ed4:	2f00      	cmp	r7, #0
 8002ed6:	f000 80d9 	beq.w	800308c <_printf_i+0x1d4>
 8002eda:	2f58      	cmp	r7, #88	; 0x58
 8002edc:	f000 80a4 	beq.w	8003028 <_printf_i+0x170>
 8002ee0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ee8:	e03a      	b.n	8002f60 <_printf_i+0xa8>
 8002eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eee:	2b15      	cmp	r3, #21
 8002ef0:	d8f6      	bhi.n	8002ee0 <_printf_i+0x28>
 8002ef2:	a001      	add	r0, pc, #4	; (adr r0, 8002ef8 <_printf_i+0x40>)
 8002ef4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ef8:	08002f51 	.word	0x08002f51
 8002efc:	08002f65 	.word	0x08002f65
 8002f00:	08002ee1 	.word	0x08002ee1
 8002f04:	08002ee1 	.word	0x08002ee1
 8002f08:	08002ee1 	.word	0x08002ee1
 8002f0c:	08002ee1 	.word	0x08002ee1
 8002f10:	08002f65 	.word	0x08002f65
 8002f14:	08002ee1 	.word	0x08002ee1
 8002f18:	08002ee1 	.word	0x08002ee1
 8002f1c:	08002ee1 	.word	0x08002ee1
 8002f20:	08002ee1 	.word	0x08002ee1
 8002f24:	08003073 	.word	0x08003073
 8002f28:	08002f95 	.word	0x08002f95
 8002f2c:	08003055 	.word	0x08003055
 8002f30:	08002ee1 	.word	0x08002ee1
 8002f34:	08002ee1 	.word	0x08002ee1
 8002f38:	08003095 	.word	0x08003095
 8002f3c:	08002ee1 	.word	0x08002ee1
 8002f40:	08002f95 	.word	0x08002f95
 8002f44:	08002ee1 	.word	0x08002ee1
 8002f48:	08002ee1 	.word	0x08002ee1
 8002f4c:	0800305d 	.word	0x0800305d
 8002f50:	680b      	ldr	r3, [r1, #0]
 8002f52:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f56:	1d1a      	adds	r2, r3, #4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	600a      	str	r2, [r1, #0]
 8002f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0a4      	b.n	80030ae <_printf_i+0x1f6>
 8002f64:	6825      	ldr	r5, [r4, #0]
 8002f66:	6808      	ldr	r0, [r1, #0]
 8002f68:	062e      	lsls	r6, r5, #24
 8002f6a:	f100 0304 	add.w	r3, r0, #4
 8002f6e:	d50a      	bpl.n	8002f86 <_printf_i+0xce>
 8002f70:	6805      	ldr	r5, [r0, #0]
 8002f72:	600b      	str	r3, [r1, #0]
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	da03      	bge.n	8002f80 <_printf_i+0xc8>
 8002f78:	232d      	movs	r3, #45	; 0x2d
 8002f7a:	426d      	negs	r5, r5
 8002f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f80:	230a      	movs	r3, #10
 8002f82:	485e      	ldr	r0, [pc, #376]	; (80030fc <_printf_i+0x244>)
 8002f84:	e019      	b.n	8002fba <_printf_i+0x102>
 8002f86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f8a:	6805      	ldr	r5, [r0, #0]
 8002f8c:	600b      	str	r3, [r1, #0]
 8002f8e:	bf18      	it	ne
 8002f90:	b22d      	sxthne	r5, r5
 8002f92:	e7ef      	b.n	8002f74 <_printf_i+0xbc>
 8002f94:	680b      	ldr	r3, [r1, #0]
 8002f96:	6825      	ldr	r5, [r4, #0]
 8002f98:	1d18      	adds	r0, r3, #4
 8002f9a:	6008      	str	r0, [r1, #0]
 8002f9c:	0628      	lsls	r0, r5, #24
 8002f9e:	d501      	bpl.n	8002fa4 <_printf_i+0xec>
 8002fa0:	681d      	ldr	r5, [r3, #0]
 8002fa2:	e002      	b.n	8002faa <_printf_i+0xf2>
 8002fa4:	0669      	lsls	r1, r5, #25
 8002fa6:	d5fb      	bpl.n	8002fa0 <_printf_i+0xe8>
 8002fa8:	881d      	ldrh	r5, [r3, #0]
 8002faa:	2f6f      	cmp	r7, #111	; 0x6f
 8002fac:	bf0c      	ite	eq
 8002fae:	2308      	moveq	r3, #8
 8002fb0:	230a      	movne	r3, #10
 8002fb2:	4852      	ldr	r0, [pc, #328]	; (80030fc <_printf_i+0x244>)
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fba:	6866      	ldr	r6, [r4, #4]
 8002fbc:	2e00      	cmp	r6, #0
 8002fbe:	bfa8      	it	ge
 8002fc0:	6821      	ldrge	r1, [r4, #0]
 8002fc2:	60a6      	str	r6, [r4, #8]
 8002fc4:	bfa4      	itt	ge
 8002fc6:	f021 0104 	bicge.w	r1, r1, #4
 8002fca:	6021      	strge	r1, [r4, #0]
 8002fcc:	b90d      	cbnz	r5, 8002fd2 <_printf_i+0x11a>
 8002fce:	2e00      	cmp	r6, #0
 8002fd0:	d04d      	beq.n	800306e <_printf_i+0x1b6>
 8002fd2:	4616      	mov	r6, r2
 8002fd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002fd8:	fb03 5711 	mls	r7, r3, r1, r5
 8002fdc:	5dc7      	ldrb	r7, [r0, r7]
 8002fde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002fe2:	462f      	mov	r7, r5
 8002fe4:	42bb      	cmp	r3, r7
 8002fe6:	460d      	mov	r5, r1
 8002fe8:	d9f4      	bls.n	8002fd4 <_printf_i+0x11c>
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d10b      	bne.n	8003006 <_printf_i+0x14e>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	07df      	lsls	r7, r3, #31
 8002ff2:	d508      	bpl.n	8003006 <_printf_i+0x14e>
 8002ff4:	6923      	ldr	r3, [r4, #16]
 8002ff6:	6861      	ldr	r1, [r4, #4]
 8002ff8:	4299      	cmp	r1, r3
 8002ffa:	bfde      	ittt	le
 8002ffc:	2330      	movle	r3, #48	; 0x30
 8002ffe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003002:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003006:	1b92      	subs	r2, r2, r6
 8003008:	6122      	str	r2, [r4, #16]
 800300a:	464b      	mov	r3, r9
 800300c:	4621      	mov	r1, r4
 800300e:	4640      	mov	r0, r8
 8003010:	f8cd a000 	str.w	sl, [sp]
 8003014:	aa03      	add	r2, sp, #12
 8003016:	f7ff fedf 	bl	8002dd8 <_printf_common>
 800301a:	3001      	adds	r0, #1
 800301c:	d14c      	bne.n	80030b8 <_printf_i+0x200>
 800301e:	f04f 30ff 	mov.w	r0, #4294967295
 8003022:	b004      	add	sp, #16
 8003024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003028:	4834      	ldr	r0, [pc, #208]	; (80030fc <_printf_i+0x244>)
 800302a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800302e:	680e      	ldr	r6, [r1, #0]
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	f856 5b04 	ldr.w	r5, [r6], #4
 8003036:	061f      	lsls	r7, r3, #24
 8003038:	600e      	str	r6, [r1, #0]
 800303a:	d514      	bpl.n	8003066 <_printf_i+0x1ae>
 800303c:	07d9      	lsls	r1, r3, #31
 800303e:	bf44      	itt	mi
 8003040:	f043 0320 	orrmi.w	r3, r3, #32
 8003044:	6023      	strmi	r3, [r4, #0]
 8003046:	b91d      	cbnz	r5, 8003050 <_printf_i+0x198>
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	f023 0320 	bic.w	r3, r3, #32
 800304e:	6023      	str	r3, [r4, #0]
 8003050:	2310      	movs	r3, #16
 8003052:	e7af      	b.n	8002fb4 <_printf_i+0xfc>
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	f043 0320 	orr.w	r3, r3, #32
 800305a:	6023      	str	r3, [r4, #0]
 800305c:	2378      	movs	r3, #120	; 0x78
 800305e:	4828      	ldr	r0, [pc, #160]	; (8003100 <_printf_i+0x248>)
 8003060:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003064:	e7e3      	b.n	800302e <_printf_i+0x176>
 8003066:	065e      	lsls	r6, r3, #25
 8003068:	bf48      	it	mi
 800306a:	b2ad      	uxthmi	r5, r5
 800306c:	e7e6      	b.n	800303c <_printf_i+0x184>
 800306e:	4616      	mov	r6, r2
 8003070:	e7bb      	b.n	8002fea <_printf_i+0x132>
 8003072:	680b      	ldr	r3, [r1, #0]
 8003074:	6826      	ldr	r6, [r4, #0]
 8003076:	1d1d      	adds	r5, r3, #4
 8003078:	6960      	ldr	r0, [r4, #20]
 800307a:	600d      	str	r5, [r1, #0]
 800307c:	0635      	lsls	r5, r6, #24
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	d501      	bpl.n	8003086 <_printf_i+0x1ce>
 8003082:	6018      	str	r0, [r3, #0]
 8003084:	e002      	b.n	800308c <_printf_i+0x1d4>
 8003086:	0671      	lsls	r1, r6, #25
 8003088:	d5fb      	bpl.n	8003082 <_printf_i+0x1ca>
 800308a:	8018      	strh	r0, [r3, #0]
 800308c:	2300      	movs	r3, #0
 800308e:	4616      	mov	r6, r2
 8003090:	6123      	str	r3, [r4, #16]
 8003092:	e7ba      	b.n	800300a <_printf_i+0x152>
 8003094:	680b      	ldr	r3, [r1, #0]
 8003096:	1d1a      	adds	r2, r3, #4
 8003098:	600a      	str	r2, [r1, #0]
 800309a:	681e      	ldr	r6, [r3, #0]
 800309c:	2100      	movs	r1, #0
 800309e:	4630      	mov	r0, r6
 80030a0:	6862      	ldr	r2, [r4, #4]
 80030a2:	f000 f82f 	bl	8003104 <memchr>
 80030a6:	b108      	cbz	r0, 80030ac <_printf_i+0x1f4>
 80030a8:	1b80      	subs	r0, r0, r6
 80030aa:	6060      	str	r0, [r4, #4]
 80030ac:	6863      	ldr	r3, [r4, #4]
 80030ae:	6123      	str	r3, [r4, #16]
 80030b0:	2300      	movs	r3, #0
 80030b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b6:	e7a8      	b.n	800300a <_printf_i+0x152>
 80030b8:	4632      	mov	r2, r6
 80030ba:	4649      	mov	r1, r9
 80030bc:	4640      	mov	r0, r8
 80030be:	6923      	ldr	r3, [r4, #16]
 80030c0:	47d0      	blx	sl
 80030c2:	3001      	adds	r0, #1
 80030c4:	d0ab      	beq.n	800301e <_printf_i+0x166>
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	079b      	lsls	r3, r3, #30
 80030ca:	d413      	bmi.n	80030f4 <_printf_i+0x23c>
 80030cc:	68e0      	ldr	r0, [r4, #12]
 80030ce:	9b03      	ldr	r3, [sp, #12]
 80030d0:	4298      	cmp	r0, r3
 80030d2:	bfb8      	it	lt
 80030d4:	4618      	movlt	r0, r3
 80030d6:	e7a4      	b.n	8003022 <_printf_i+0x16a>
 80030d8:	2301      	movs	r3, #1
 80030da:	4632      	mov	r2, r6
 80030dc:	4649      	mov	r1, r9
 80030de:	4640      	mov	r0, r8
 80030e0:	47d0      	blx	sl
 80030e2:	3001      	adds	r0, #1
 80030e4:	d09b      	beq.n	800301e <_printf_i+0x166>
 80030e6:	3501      	adds	r5, #1
 80030e8:	68e3      	ldr	r3, [r4, #12]
 80030ea:	9903      	ldr	r1, [sp, #12]
 80030ec:	1a5b      	subs	r3, r3, r1
 80030ee:	42ab      	cmp	r3, r5
 80030f0:	dcf2      	bgt.n	80030d8 <_printf_i+0x220>
 80030f2:	e7eb      	b.n	80030cc <_printf_i+0x214>
 80030f4:	2500      	movs	r5, #0
 80030f6:	f104 0619 	add.w	r6, r4, #25
 80030fa:	e7f5      	b.n	80030e8 <_printf_i+0x230>
 80030fc:	080033cb 	.word	0x080033cb
 8003100:	080033dc 	.word	0x080033dc

08003104 <memchr>:
 8003104:	4603      	mov	r3, r0
 8003106:	b510      	push	{r4, lr}
 8003108:	b2c9      	uxtb	r1, r1
 800310a:	4402      	add	r2, r0
 800310c:	4293      	cmp	r3, r2
 800310e:	4618      	mov	r0, r3
 8003110:	d101      	bne.n	8003116 <memchr+0x12>
 8003112:	2000      	movs	r0, #0
 8003114:	e003      	b.n	800311e <memchr+0x1a>
 8003116:	7804      	ldrb	r4, [r0, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	428c      	cmp	r4, r1
 800311c:	d1f6      	bne.n	800310c <memchr+0x8>
 800311e:	bd10      	pop	{r4, pc}

08003120 <memcpy>:
 8003120:	440a      	add	r2, r1
 8003122:	4291      	cmp	r1, r2
 8003124:	f100 33ff 	add.w	r3, r0, #4294967295
 8003128:	d100      	bne.n	800312c <memcpy+0xc>
 800312a:	4770      	bx	lr
 800312c:	b510      	push	{r4, lr}
 800312e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003132:	4291      	cmp	r1, r2
 8003134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003138:	d1f9      	bne.n	800312e <memcpy+0xe>
 800313a:	bd10      	pop	{r4, pc}

0800313c <memmove>:
 800313c:	4288      	cmp	r0, r1
 800313e:	b510      	push	{r4, lr}
 8003140:	eb01 0402 	add.w	r4, r1, r2
 8003144:	d902      	bls.n	800314c <memmove+0x10>
 8003146:	4284      	cmp	r4, r0
 8003148:	4623      	mov	r3, r4
 800314a:	d807      	bhi.n	800315c <memmove+0x20>
 800314c:	1e43      	subs	r3, r0, #1
 800314e:	42a1      	cmp	r1, r4
 8003150:	d008      	beq.n	8003164 <memmove+0x28>
 8003152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800315a:	e7f8      	b.n	800314e <memmove+0x12>
 800315c:	4601      	mov	r1, r0
 800315e:	4402      	add	r2, r0
 8003160:	428a      	cmp	r2, r1
 8003162:	d100      	bne.n	8003166 <memmove+0x2a>
 8003164:	bd10      	pop	{r4, pc}
 8003166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800316a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800316e:	e7f7      	b.n	8003160 <memmove+0x24>

08003170 <_free_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4605      	mov	r5, r0
 8003174:	2900      	cmp	r1, #0
 8003176:	d043      	beq.n	8003200 <_free_r+0x90>
 8003178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800317c:	1f0c      	subs	r4, r1, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	bfb8      	it	lt
 8003182:	18e4      	addlt	r4, r4, r3
 8003184:	f000 f8d0 	bl	8003328 <__malloc_lock>
 8003188:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <_free_r+0x94>)
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	4610      	mov	r0, r2
 800318e:	b933      	cbnz	r3, 800319e <_free_r+0x2e>
 8003190:	6063      	str	r3, [r4, #4]
 8003192:	6014      	str	r4, [r2, #0]
 8003194:	4628      	mov	r0, r5
 8003196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800319a:	f000 b8cb 	b.w	8003334 <__malloc_unlock>
 800319e:	42a3      	cmp	r3, r4
 80031a0:	d90a      	bls.n	80031b8 <_free_r+0x48>
 80031a2:	6821      	ldr	r1, [r4, #0]
 80031a4:	1862      	adds	r2, r4, r1
 80031a6:	4293      	cmp	r3, r2
 80031a8:	bf01      	itttt	eq
 80031aa:	681a      	ldreq	r2, [r3, #0]
 80031ac:	685b      	ldreq	r3, [r3, #4]
 80031ae:	1852      	addeq	r2, r2, r1
 80031b0:	6022      	streq	r2, [r4, #0]
 80031b2:	6063      	str	r3, [r4, #4]
 80031b4:	6004      	str	r4, [r0, #0]
 80031b6:	e7ed      	b.n	8003194 <_free_r+0x24>
 80031b8:	461a      	mov	r2, r3
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	b10b      	cbz	r3, 80031c2 <_free_r+0x52>
 80031be:	42a3      	cmp	r3, r4
 80031c0:	d9fa      	bls.n	80031b8 <_free_r+0x48>
 80031c2:	6811      	ldr	r1, [r2, #0]
 80031c4:	1850      	adds	r0, r2, r1
 80031c6:	42a0      	cmp	r0, r4
 80031c8:	d10b      	bne.n	80031e2 <_free_r+0x72>
 80031ca:	6820      	ldr	r0, [r4, #0]
 80031cc:	4401      	add	r1, r0
 80031ce:	1850      	adds	r0, r2, r1
 80031d0:	4283      	cmp	r3, r0
 80031d2:	6011      	str	r1, [r2, #0]
 80031d4:	d1de      	bne.n	8003194 <_free_r+0x24>
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4401      	add	r1, r0
 80031dc:	6011      	str	r1, [r2, #0]
 80031de:	6053      	str	r3, [r2, #4]
 80031e0:	e7d8      	b.n	8003194 <_free_r+0x24>
 80031e2:	d902      	bls.n	80031ea <_free_r+0x7a>
 80031e4:	230c      	movs	r3, #12
 80031e6:	602b      	str	r3, [r5, #0]
 80031e8:	e7d4      	b.n	8003194 <_free_r+0x24>
 80031ea:	6820      	ldr	r0, [r4, #0]
 80031ec:	1821      	adds	r1, r4, r0
 80031ee:	428b      	cmp	r3, r1
 80031f0:	bf01      	itttt	eq
 80031f2:	6819      	ldreq	r1, [r3, #0]
 80031f4:	685b      	ldreq	r3, [r3, #4]
 80031f6:	1809      	addeq	r1, r1, r0
 80031f8:	6021      	streq	r1, [r4, #0]
 80031fa:	6063      	str	r3, [r4, #4]
 80031fc:	6054      	str	r4, [r2, #4]
 80031fe:	e7c9      	b.n	8003194 <_free_r+0x24>
 8003200:	bd38      	pop	{r3, r4, r5, pc}
 8003202:	bf00      	nop
 8003204:	20000090 	.word	0x20000090

08003208 <_malloc_r>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	1ccd      	adds	r5, r1, #3
 800320c:	f025 0503 	bic.w	r5, r5, #3
 8003210:	3508      	adds	r5, #8
 8003212:	2d0c      	cmp	r5, #12
 8003214:	bf38      	it	cc
 8003216:	250c      	movcc	r5, #12
 8003218:	2d00      	cmp	r5, #0
 800321a:	4606      	mov	r6, r0
 800321c:	db01      	blt.n	8003222 <_malloc_r+0x1a>
 800321e:	42a9      	cmp	r1, r5
 8003220:	d903      	bls.n	800322a <_malloc_r+0x22>
 8003222:	230c      	movs	r3, #12
 8003224:	6033      	str	r3, [r6, #0]
 8003226:	2000      	movs	r0, #0
 8003228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322a:	f000 f87d 	bl	8003328 <__malloc_lock>
 800322e:	4921      	ldr	r1, [pc, #132]	; (80032b4 <_malloc_r+0xac>)
 8003230:	680a      	ldr	r2, [r1, #0]
 8003232:	4614      	mov	r4, r2
 8003234:	b99c      	cbnz	r4, 800325e <_malloc_r+0x56>
 8003236:	4f20      	ldr	r7, [pc, #128]	; (80032b8 <_malloc_r+0xb0>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	b923      	cbnz	r3, 8003246 <_malloc_r+0x3e>
 800323c:	4621      	mov	r1, r4
 800323e:	4630      	mov	r0, r6
 8003240:	f000 f862 	bl	8003308 <_sbrk_r>
 8003244:	6038      	str	r0, [r7, #0]
 8003246:	4629      	mov	r1, r5
 8003248:	4630      	mov	r0, r6
 800324a:	f000 f85d 	bl	8003308 <_sbrk_r>
 800324e:	1c43      	adds	r3, r0, #1
 8003250:	d123      	bne.n	800329a <_malloc_r+0x92>
 8003252:	230c      	movs	r3, #12
 8003254:	4630      	mov	r0, r6
 8003256:	6033      	str	r3, [r6, #0]
 8003258:	f000 f86c 	bl	8003334 <__malloc_unlock>
 800325c:	e7e3      	b.n	8003226 <_malloc_r+0x1e>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	1b5b      	subs	r3, r3, r5
 8003262:	d417      	bmi.n	8003294 <_malloc_r+0x8c>
 8003264:	2b0b      	cmp	r3, #11
 8003266:	d903      	bls.n	8003270 <_malloc_r+0x68>
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	441c      	add	r4, r3
 800326c:	6025      	str	r5, [r4, #0]
 800326e:	e004      	b.n	800327a <_malloc_r+0x72>
 8003270:	6863      	ldr	r3, [r4, #4]
 8003272:	42a2      	cmp	r2, r4
 8003274:	bf0c      	ite	eq
 8003276:	600b      	streq	r3, [r1, #0]
 8003278:	6053      	strne	r3, [r2, #4]
 800327a:	4630      	mov	r0, r6
 800327c:	f000 f85a 	bl	8003334 <__malloc_unlock>
 8003280:	f104 000b 	add.w	r0, r4, #11
 8003284:	1d23      	adds	r3, r4, #4
 8003286:	f020 0007 	bic.w	r0, r0, #7
 800328a:	1ac2      	subs	r2, r0, r3
 800328c:	d0cc      	beq.n	8003228 <_malloc_r+0x20>
 800328e:	1a1b      	subs	r3, r3, r0
 8003290:	50a3      	str	r3, [r4, r2]
 8003292:	e7c9      	b.n	8003228 <_malloc_r+0x20>
 8003294:	4622      	mov	r2, r4
 8003296:	6864      	ldr	r4, [r4, #4]
 8003298:	e7cc      	b.n	8003234 <_malloc_r+0x2c>
 800329a:	1cc4      	adds	r4, r0, #3
 800329c:	f024 0403 	bic.w	r4, r4, #3
 80032a0:	42a0      	cmp	r0, r4
 80032a2:	d0e3      	beq.n	800326c <_malloc_r+0x64>
 80032a4:	1a21      	subs	r1, r4, r0
 80032a6:	4630      	mov	r0, r6
 80032a8:	f000 f82e 	bl	8003308 <_sbrk_r>
 80032ac:	3001      	adds	r0, #1
 80032ae:	d1dd      	bne.n	800326c <_malloc_r+0x64>
 80032b0:	e7cf      	b.n	8003252 <_malloc_r+0x4a>
 80032b2:	bf00      	nop
 80032b4:	20000090 	.word	0x20000090
 80032b8:	20000094 	.word	0x20000094

080032bc <_realloc_r>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	4607      	mov	r7, r0
 80032c0:	4614      	mov	r4, r2
 80032c2:	460e      	mov	r6, r1
 80032c4:	b921      	cbnz	r1, 80032d0 <_realloc_r+0x14>
 80032c6:	4611      	mov	r1, r2
 80032c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032cc:	f7ff bf9c 	b.w	8003208 <_malloc_r>
 80032d0:	b922      	cbnz	r2, 80032dc <_realloc_r+0x20>
 80032d2:	f7ff ff4d 	bl	8003170 <_free_r>
 80032d6:	4625      	mov	r5, r4
 80032d8:	4628      	mov	r0, r5
 80032da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032dc:	f000 f830 	bl	8003340 <_malloc_usable_size_r>
 80032e0:	42a0      	cmp	r0, r4
 80032e2:	d20f      	bcs.n	8003304 <_realloc_r+0x48>
 80032e4:	4621      	mov	r1, r4
 80032e6:	4638      	mov	r0, r7
 80032e8:	f7ff ff8e 	bl	8003208 <_malloc_r>
 80032ec:	4605      	mov	r5, r0
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d0f2      	beq.n	80032d8 <_realloc_r+0x1c>
 80032f2:	4631      	mov	r1, r6
 80032f4:	4622      	mov	r2, r4
 80032f6:	f7ff ff13 	bl	8003120 <memcpy>
 80032fa:	4631      	mov	r1, r6
 80032fc:	4638      	mov	r0, r7
 80032fe:	f7ff ff37 	bl	8003170 <_free_r>
 8003302:	e7e9      	b.n	80032d8 <_realloc_r+0x1c>
 8003304:	4635      	mov	r5, r6
 8003306:	e7e7      	b.n	80032d8 <_realloc_r+0x1c>

08003308 <_sbrk_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	2300      	movs	r3, #0
 800330c:	4d05      	ldr	r5, [pc, #20]	; (8003324 <_sbrk_r+0x1c>)
 800330e:	4604      	mov	r4, r0
 8003310:	4608      	mov	r0, r1
 8003312:	602b      	str	r3, [r5, #0]
 8003314:	f7fd fa56 	bl	80007c4 <_sbrk>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d102      	bne.n	8003322 <_sbrk_r+0x1a>
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	b103      	cbz	r3, 8003322 <_sbrk_r+0x1a>
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	20000174 	.word	0x20000174

08003328 <__malloc_lock>:
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <__malloc_lock+0x8>)
 800332a:	f000 b811 	b.w	8003350 <__retarget_lock_acquire_recursive>
 800332e:	bf00      	nop
 8003330:	2000017c 	.word	0x2000017c

08003334 <__malloc_unlock>:
 8003334:	4801      	ldr	r0, [pc, #4]	; (800333c <__malloc_unlock+0x8>)
 8003336:	f000 b80c 	b.w	8003352 <__retarget_lock_release_recursive>
 800333a:	bf00      	nop
 800333c:	2000017c 	.word	0x2000017c

08003340 <_malloc_usable_size_r>:
 8003340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003344:	1f18      	subs	r0, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	bfbc      	itt	lt
 800334a:	580b      	ldrlt	r3, [r1, r0]
 800334c:	18c0      	addlt	r0, r0, r3
 800334e:	4770      	bx	lr

08003350 <__retarget_lock_acquire_recursive>:
 8003350:	4770      	bx	lr

08003352 <__retarget_lock_release_recursive>:
 8003352:	4770      	bx	lr

08003354 <_init>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	bf00      	nop
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr

08003360 <_fini>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	bf00      	nop
 8003364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003366:	bc08      	pop	{r3}
 8003368:	469e      	mov	lr, r3
 800336a:	4770      	bx	lr
